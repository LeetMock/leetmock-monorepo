openapi: 3.0.3
info:
  title: Convex App - OpenAPI 3.0
  version: 0.0.0
servers:
  - url: https://neat-warbler-689.convex.cloud
security:
  - bearerAuth: []
tags:
  - name: query
    description: Functions that read data
  - name: mutation
    description: Functions that write/update/delete data
  - name: action
    description: Functions that can make calls to external APIs
paths:
  /api/run/sessions/createCodeSession:
    post:
      summary: Calls a mutation at the path sessions.js:createCodeSession
      tags:
        - mutation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_sessions.createCodeSession"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_sessions.createCodeSession"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/sessions/endSession:
    post:
      summary: Calls a mutation at the path sessions.js:endSession
      tags:
        - mutation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_sessions.endSession"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_sessions.endSession"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/sessions/exists:
    post:
      summary: Calls a query at the path sessions.js:exists
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_sessions.exists"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_sessions.exists"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/sessions/getActiveSession:
    post:
      summary: Calls a query at the path sessions.js:getActiveSession
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_sessions.getActiveSession"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_sessions.getActiveSession"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/sessions/getById:
    post:
      summary: Calls a query at the path sessions.js:getById
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_sessions.getById"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_sessions.getById"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/sessions/getById_unauth:
    post:
      summary: Calls a query at the path sessions.js:getById_unauth
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_sessions.getById_unauth"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_sessions.getById_unauth"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/sessions/getByUserId:
    post:
      summary: Calls a query at the path sessions.js:getByUserId
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_sessions.getByUserId"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_sessions.getByUserId"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/sessions/startSession:
    post:
      summary: Calls a mutation at the path sessions.js:startSession
      tags:
        - mutation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_sessions.startSession"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_sessions.startSession"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/actions/createAgentThread:
    post:
      summary: Calls a action at the path actions.js:createAgentThread
      tags:
        - action
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_actions.createAgentThread"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_actions.createAgentThread"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/actions/getToken:
    post:
      summary: Calls a action at the path actions.js:getToken
      tags:
        - action
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_actions.getToken"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_actions.getToken"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/actions/runCode:
    post:
      summary: Calls a action at the path actions.js:runCode
      tags:
        - action
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_actions.runCode"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_actions.runCode"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/actions/runTests:
    post:
      summary: Calls a action at the path actions.js:runTests
      tags:
        - action
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_actions.runTests"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_actions.runTests"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/actions/getSessionMetadata:
    post:
      summary: Calls a action at the path actions.js:getSessionMetadata
      tags:
        - action
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_actions.getSessionMetadata"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_actions.getSessionMetadata"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/admins/createUserProfile:
    post:
      summary: Calls a mutation at the path admins.js:createUserProfile
      tags:
        - mutation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_admins.createUserProfile"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_admins.createUserProfile"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/admins/patchUserSubscription:
    post:
      summary: Calls a mutation at the path admins.js:patchUserSubscription
      tags:
        - mutation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_admins.patchUserSubscription"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_admins.patchUserSubscription"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/inviteCodes/applyInviteCode:
    post:
      summary: Calls a mutation at the path inviteCodes.js:applyInviteCode
      tags:
        - mutation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_inviteCodes.applyInviteCode"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_inviteCodes.applyInviteCode"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/userProfiles/getUserProfile:
    post:
      summary: Calls a query at the path userProfiles.js:getUserProfile
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_userProfiles.getUserProfile"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_userProfiles.getUserProfile"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/codeSessionEvents/commitCodeSessionEvent:
    post:
      summary: Calls a mutation at the path codeSessionEvents.js:commitCodeSessionEvent
      tags:
        - mutation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_codeSessionEvents.commitCodeSessionEvent"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_codeSessionEvents.commitCodeSessionEvent"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/codeSessionEvents/getLatestContentChangeEvent:
    post:
      summary: Calls a query at the path codeSessionEvents.js:getLatestContentChangeEvent
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_codeSessionEvents.getLatestContentChangeEvent"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_codeSessionEvents.getLatestContentChangeEvent"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/codeSessionEvents/getLatestGroundTruthTestcaseExecutedEvent:
    post:
      summary: Calls a query at the path codeSessionEvents.js:getLatestGroundTruthTestcaseExecutedEvent
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_codeSessionEvents.getLatestGroundTruthTestcaseExecutedEvent"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_codeSessionEvents.getLatestGroundTruthTestcaseExecutedEvent"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/codeSessionEvents/getLatestTestcaseChangeEvent:
    post:
      summary: Calls a query at the path codeSessionEvents.js:getLatestTestcaseChangeEvent
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_codeSessionEvents.getLatestTestcaseChangeEvent"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_codeSessionEvents.getLatestTestcaseChangeEvent"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/codeSessionEvents/getLatestUserTestcaseExecutedEvent:
    post:
      summary: Calls a query at the path codeSessionEvents.js:getLatestUserTestcaseExecutedEvent
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_codeSessionEvents.getLatestUserTestcaseExecutedEvent"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_codeSessionEvents.getLatestUserTestcaseExecutedEvent"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/questions/getAll:
    post:
      summary: Calls a query at the path questions.js:getAll
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_questions.getAll"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_questions.getAll"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/questions/getById:
    post:
      summary: Calls a query at the path questions.js:getById
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_questions.getById"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_questions.getById"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/codeSessionStates/get:
    post:
      summary: Calls a query at the path codeSessionStates.js:get
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_codeSessionStates.get"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_codeSessionStates.get"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/codeSessionStates/getEditorState:
    post:
      summary: Calls a query at the path codeSessionStates.js:getEditorState
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_codeSessionStates.getEditorState"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_codeSessionStates.getEditorState"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/codeSessionStates/getSessionStateBySessionId:
    post:
      summary: Calls a query at the path codeSessionStates.js:getSessionStateBySessionId
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_codeSessionStates.getSessionStateBySessionId"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_codeSessionStates.getSessionStateBySessionId"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/codeSessionStates/getTerminalState:
    post:
      summary: Calls a query at the path codeSessionStates.js:getTerminalState
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_codeSessionStates.getTerminalState"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_codeSessionStates.getTerminalState"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/codeSessionStates/getTestCasesState:
    post:
      summary: Calls a query at the path codeSessionStates.js:getTestCasesState
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_codeSessionStates.getTestCasesState"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_codeSessionStates.getTestCasesState"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/eval/insertEvaluation:
    post:
      summary: Calls a mutation at the path eval.js:insertEvaluation
      tags:
        - mutation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_eval.insertEvaluation"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_eval.insertEvaluation"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Token of the format "Bearer {token}" for normal authentication and "Convex {token}" for admin tokens.
  schemas:
    Request_sessions.createCodeSession:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - agentThreadId
            - assistantId
            - interviewFlow
            - interviewMode
            - interviewType
            - programmingLanguage
            - questionId
            - timeLimit
            - voice
          properties:
            agentThreadId:
              type: string
            assistantId:
              type: string
            interviewFlow:
              type: array
              items:
                type: string
            interviewMode:
              oneOf:
                - type: string
                  enum:
                    - "practice"
                - type: string
                  enum:
                    - "strict"
            interviewType:
              oneOf:
                - type: string
                  enum:
                    - "coding"
                - type: string
                  enum:
                    - "system_design"
                - type: string
                  enum:
                    - "behavioral"
            programmingLanguage:
              type: string
            questionId:
              type: string
              description: ID from table "questions"
            timeLimit:
              type: number
            voice:
              type: string

    Response_sessions.createCodeSession:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_sessions.endSession:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_sessions.endSession:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_sessions.endSessionInternal:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_sessions.endSessionInternal:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_sessions.exists:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string

    Response_sessions.exists:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_sessions.getActiveSession:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - userId
          properties:
            userId:
              type: string

    Response_sessions.getActiveSession:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_sessions.getById:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_sessions.getById:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_sessions.getByIdInternal:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_sessions.getByIdInternal:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_sessions.getById_unauth:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_sessions.getById_unauth:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_sessions.getByUserId:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - userId
          properties:
            userId:
              type: string

    Response_sessions.getByUserId:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_sessions.startSession:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_sessions.startSession:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_actions.createAgentThread:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - graphId
          properties:
            graphId:
              type: string

    Response_actions.createAgentThread:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_actions.getToken:
      type: object
      required:
        - args
      properties:
        args: {}

    Response_actions.getToken:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_actions.runCode:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - code
            - language
          properties:
            code:
              type: string
            language:
              type: string

    Response_actions.runCode:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_actions.runTests:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - language
            - questionId
            - sessionId
          properties:
            language:
              type: string
            questionId:
              type: string
              description: ID from table "questions"
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_actions.runTests:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value:
          type: object
          required:
            - isError
            - status
          properties:
            exception:
              type: string
            executionTime:
              type: number
            isError:
              type: boolean
            status:
              type: string
            stderr:
              type: string
            stdout:
              type: string
            testResults:
              type: array
              items:
                type: object
                required:
                  - actual
                  - caseNumber
                  - error
                  - expected
                  - input
                  - passed
                  - stdout
                properties:
                  actual: {}
                  caseNumber:
                    type: number
                  error:
                    type: string
                    nullable: true
                  expected: {}
                  input:
                    type: object
                  passed:
                    type: boolean
                  stdout:
                    type: string
                    nullable: true

    Request_actions.getSessionMetadata:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_actions.getSessionMetadata:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value:
          type: object
          required:
            - agent_thread_id
            - assistant_id
            - question_content
            - question_id
            - question_title
            - session_id
            - session_status
          properties:
            agent_thread_id:
              type: string
            assistant_id:
              type: string
            question_content:
              type: string
            question_id:
              type: string
              description: ID from table "questions"
            question_title:
              type: string
            session_id:
              type: string
              description: ID from table "sessions"
            session_status:
              type: string

    Request_admins.createUserProfile:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - email
            - minutesRemaining
            - role
            - subscription
          properties:
            email:
              type: string
            minutesRemaining:
              type: number
            nextBillingDate:
              type: number
            role:
              oneOf:
                - type: string
                  enum:
                    - "admin"
                - type: string
                  enum:
                    - "user"
            subscription:
              oneOf:
                - type: string
                  enum:
                    - "free"
                - type: string
                  enum:
                    - "basic"
                - type: string
                  enum:
                    - "premium"
                - type: string
                  enum:
                    - "enterprise"

    Response_admins.createUserProfile:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_admins.patchUserSubscription:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - userId
          properties:
            minutesRemaining:
              type: number
            subscription:
              oneOf:
                - type: string
                  enum:
                    - "free"
                - type: string
                  enum:
                    - "basic"
                - type: string
                  enum:
                    - "premium"
                - type: string
                  enum:
                    - "enterprise"
            userId:
              type: string

    Response_admins.patchUserSubscription:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_inviteCodes.applyInviteCode:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - code
          properties:
            code:
              type: string

    Response_inviteCodes.applyInviteCode:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_inviteCodes.createInviteCode:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - assignedRole
          properties:
            assignedRole:
              oneOf:
                - type: string
                  enum:
                    - "admin"
                - type: string
                  enum:
                    - "user"

    Response_inviteCodes.createInviteCode:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_userProfiles.getByEmailInternal:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          properties:
            email:
              type: string

    Response_userProfiles.getByEmailInternal:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_userProfiles.getUserProfile:
      type: object
      required:
        - args
      properties:
        args: {}

    Response_userProfiles.getUserProfile:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_userProfiles.getUserProfileInternal:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - userId
          properties:
            userId:
              type: string

    Response_userProfiles.getUserProfileInternal:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_userProfiles.refreshMinutesForYearlyPlansInternal:
      type: object
      required:
        - args
      properties:
        args:
          type: object

    Response_userProfiles.refreshMinutesForYearlyPlansInternal:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_userProfiles.updateSubscriptionByEmailInternal:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - email
          properties:
            currentPeriodEnd:
              type: number
            currentPeriodStart:
              type: number
            email:
              type: string
            interval:
              oneOf:
                - type: string
                  enum:
                    - "month"
                - type: string
                  enum:
                    - "year"
                - type: string
                  enum:
                    - "day"
                - type: string
                  enum:
                    - "week"
            latestSubscriptionId:
              type: string
            minutesRemaining:
              type: number
            planName:
              oneOf:
                - type: string
                  enum:
                    - "free"
                - type: string
                  enum:
                    - "basic"
                - type: string
                  enum:
                    - "premium"
                - type: string
                  enum:
                    - "enterprise"
            refreshDate:
              type: number
            subscriptionStatus:
              type: string

    Response_userProfiles.updateSubscriptionByEmailInternal:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_userProfiles.voidSubscriptionInternal:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - email
          properties:
            email:
              type: string

    Response_userProfiles.voidSubscriptionInternal:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_codeSessionEvents.commitCodeSessionEvent:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - event
            - sessionId
          properties:
            event:
              oneOf:
                - type: object
                  required:
                    - data
                    - type
                  properties:
                    data:
                      type: object
                      required:
                        - after
                        - before
                      properties:
                        after:
                          type: string
                        before:
                          type: string
                    type:
                      type: string
                      enum:
                        - "content_changed"
                - type: object
                  required:
                    - data
                    - type
                  properties:
                    data: {}
                    type:
                      type: string
                      enum:
                        - "user_test_executed"
                - type: object
                  required:
                    - data
                    - type
                  properties:
                    data: {}
                    type:
                      type: string
                      enum:
                        - "testcase_added"
                - type: object
                  required:
                    - data
                    - type
                  properties:
                    data: {}
                    type:
                      type: string
                      enum:
                        - "testcase_removed"
                - type: object
                  required:
                    - data
                    - type
                  properties:
                    data:
                      type: boolean
                    type:
                      type: string
                      enum:
                        - "question_displayed"
                - type: object
                  required:
                    - data
                    - type
                  properties:
                    data:
                      type: object
                      required:
                        - after
                        - before
                      properties:
                        after:
                          type: array
                          items:
                            type: object
                            required:
                              - input
                            properties:
                              expectedOutput: {}
                              input:
                                type: object
                        before:
                          type: array
                          items:
                            type: object
                            required:
                              - input
                            properties:
                              expectedOutput: {}
                              input:
                                type: object
                    type:
                      type: string
                      enum:
                        - "testcase_changed"
                - type: object
                  required:
                    - data
                    - type
                  properties:
                    data:
                      type: object
                      required:
                        - testResults
                      properties:
                        testResults:
                          type: array
                          items:
                            type: object
                            required:
                              - actual
                              - caseNumber
                              - error
                              - expected
                              - input
                              - passed
                              - stdout
                            properties:
                              actual: {}
                              caseNumber:
                                type: number
                              error:
                                type: string
                                nullable: true
                              expected: {}
                              input:
                                type: object
                              passed:
                                type: boolean
                              stdout:
                                type: string
                                nullable: true
                    type:
                      type: string
                      enum:
                        - "user_testcase_executed"
                - type: object
                  required:
                    - data
                    - type
                  properties:
                    data:
                      type: object
                      required:
                        - testResults
                      properties:
                        testResults:
                          type: array
                          items:
                            type: object
                            required:
                              - actual
                              - caseNumber
                              - error
                              - expected
                              - input
                              - passed
                              - stdout
                            properties:
                              actual: {}
                              caseNumber:
                                type: number
                              error:
                                type: string
                                nullable: true
                              expected: {}
                              input:
                                type: object
                              passed:
                                type: boolean
                              stdout:
                                type: string
                                nullable: true
                    type:
                      type: string
                      enum:
                        - "groundtruth_testcase_executed"
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_codeSessionEvents.commitCodeSessionEvent:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_codeSessionEvents.getLatestContentChangeEvent:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - codeSessionStateId
          properties:
            codeSessionStateId:
              type: string
              description: ID from table "codeSessionStates"

    Response_codeSessionEvents.getLatestContentChangeEvent:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value:
          type: object
          required:
            - event
            - id
            - ts
          properties:
            event:
              type: object
              required:
                - data
                - type
              properties:
                data:
                  type: object
                  required:
                    - after
                    - before
                  properties:
                    after:
                      type: string
                    before:
                      type: string
                type:
                  type: string
                  enum:
                    - "content_changed"
            id:
              type: string
              description: ID from table "codeSessionEvents"
            ts:
              type: number
          nullable: true

    Request_codeSessionEvents.getLatestGroundTruthTestcaseExecutedEvent:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - codeSessionStateId
          properties:
            codeSessionStateId:
              type: string
              description: ID from table "codeSessionStates"

    Response_codeSessionEvents.getLatestGroundTruthTestcaseExecutedEvent:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value:
          type: object
          required:
            - event
            - id
            - ts
          properties:
            event:
              type: object
              required:
                - data
                - type
              properties:
                data:
                  type: object
                  required:
                    - testResults
                  properties:
                    testResults:
                      type: array
                      items:
                        type: object
                        required:
                          - actual
                          - caseNumber
                          - error
                          - expected
                          - input
                          - passed
                          - stdout
                        properties:
                          actual: {}
                          caseNumber:
                            type: number
                          error:
                            type: string
                            nullable: true
                          expected: {}
                          input:
                            type: object
                          passed:
                            type: boolean
                          stdout:
                            type: string
                            nullable: true
                type:
                  type: string
                  enum:
                    - "groundtruth_testcase_executed"
            id:
              type: string
              description: ID from table "codeSessionEvents"
            ts:
              type: number
          nullable: true

    Request_codeSessionEvents.getLatestTestcaseChangeEvent:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - codeSessionStateId
          properties:
            codeSessionStateId:
              type: string
              description: ID from table "codeSessionStates"

    Response_codeSessionEvents.getLatestTestcaseChangeEvent:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value:
          type: object
          required:
            - event
            - id
            - ts
          properties:
            event:
              type: object
              required:
                - data
                - type
              properties:
                data:
                  type: object
                  required:
                    - after
                    - before
                  properties:
                    after:
                      type: array
                      items:
                        type: object
                        required:
                          - input
                        properties:
                          expectedOutput: {}
                          input:
                            type: object
                    before:
                      type: array
                      items:
                        type: object
                        required:
                          - input
                        properties:
                          expectedOutput: {}
                          input:
                            type: object
                type:
                  type: string
                  enum:
                    - "testcase_changed"
            id:
              type: string
              description: ID from table "codeSessionEvents"
            ts:
              type: number
          nullable: true

    Request_codeSessionEvents.getLatestUserTestcaseExecutedEvent:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - codeSessionStateId
          properties:
            codeSessionStateId:
              type: string
              description: ID from table "codeSessionStates"

    Response_codeSessionEvents.getLatestUserTestcaseExecutedEvent:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value:
          type: object
          required:
            - event
            - id
            - ts
          properties:
            event:
              type: object
              required:
                - data
                - type
              properties:
                data:
                  type: object
                  required:
                    - testResults
                  properties:
                    testResults:
                      type: array
                      items:
                        type: object
                        required:
                          - actual
                          - caseNumber
                          - error
                          - expected
                          - input
                          - passed
                          - stdout
                        properties:
                          actual: {}
                          caseNumber:
                            type: number
                          error:
                            type: string
                            nullable: true
                          expected: {}
                          input:
                            type: object
                          passed:
                            type: boolean
                          stdout:
                            type: string
                            nullable: true
                type:
                  type: string
                  enum:
                    - "user_testcase_executed"
            id:
              type: string
              description: ID from table "codeSessionEvents"
            ts:
              type: number
          nullable: true

    Request_questions.getAll:
      type: object
      required:
        - args
      properties:
        args: {}

    Response_questions.getAll:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_questions.getById:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          properties:
            questionId:
              type: string
              description: ID from table "questions"

    Response_questions.getById:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_questions.getByIdInternal:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - questionId
          properties:
            questionId:
              type: string
              description: ID from table "questions"

    Response_questions.getByIdInternal:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_codeSessionStates.get:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_codeSessionStates.get:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value:
          type: object
          required:
            - _creationTime
            - _id
            - displayQuestion
            - editor
            - sessionId
            - terminal
            - testcases
          properties:
            _creationTime:
              type: number
            _id:
              type: string
              description: ID from table "codeSessionStates"
            displayQuestion:
              type: boolean
            editor:
              type: object
              required:
                - content
                - language
                - lastUpdated
              properties:
                content:
                  type: string
                language:
                  type: string
                lastUpdated:
                  type: number
            sessionId:
              type: string
              description: ID from table "sessions"
            terminal:
              type: object
              required:
                - isError
                - output
              properties:
                executionTime:
                  type: number
                isError:
                  type: boolean
                output:
                  type: string
            testcases:
              type: array
              items:
                type: object
                required:
                  - input
                properties:
                  expectedOutput: {}
                  input:
                    type: object

    Request_codeSessionStates.getEditorState:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_codeSessionStates.getEditorState:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_codeSessionStates.getEditorStateInternal:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_codeSessionStates.getEditorStateInternal:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_codeSessionStates.getSessionStateBySessionId:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_codeSessionStates.getSessionStateBySessionId:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_codeSessionStates.getTerminalState:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_codeSessionStates.getTerminalState:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_codeSessionStates.getTestCasesState:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_codeSessionStates.getTestCasesState:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_codeSessionStates.getTestCasesStateInternal:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_codeSessionStates.getTestCasesStateInternal:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_eval.insertEvaluation:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - overallFeedback
            - scoreboards
            - sessionId
            - totalScore
          properties:
            overallFeedback:
              type: string
            scoreboards:
              type: object
              required:
                - communication
                - problemSolving
                - technicalCompetency
                - testing
              properties:
                communication:
                  type: object
                  required:
                    - clarification
                    - thoughtProcess
                  properties:
                    clarification:
                      type: object
                      required:
                        - comment
                        - description
                        - examples
                        - maxScore
                        - score
                        - testName
                      properties:
                        comment:
                          type: string
                        description:
                          type: string
                        examples:
                          type: array
                          items:
                            type: string
                        maxScore:
                          type: number
                        score:
                          type: number
                        testName:
                          type: string
                    thoughtProcess:
                      type: object
                      required:
                        - comment
                        - description
                        - examples
                        - maxScore
                        - score
                        - testName
                      properties:
                        comment:
                          type: string
                        description:
                          type: string
                        examples:
                          type: array
                          items:
                            type: string
                        maxScore:
                          type: number
                        score:
                          type: number
                        testName:
                          type: string
                problemSolving:
                  type: object
                  required:
                    - optimalSolution
                    - optimizationProcess
                    - questionSpecific
                  properties:
                    optimalSolution:
                      type: object
                      required:
                        - comment
                        - description
                        - examples
                        - maxScore
                        - score
                        - testName
                      properties:
                        comment:
                          type: string
                        description:
                          type: string
                        examples:
                          type: array
                          items:
                            type: string
                        maxScore:
                          type: number
                        score:
                          type: number
                        testName:
                          type: string
                    optimizationProcess:
                      type: object
                      required:
                        - comment
                        - description
                        - examples
                        - maxScore
                        - score
                        - testName
                      properties:
                        comment:
                          type: string
                        description:
                          type: string
                        examples:
                          type: array
                          items:
                            type: string
                        maxScore:
                          type: number
                        score:
                          type: number
                        testName:
                          type: string
                    questionSpecific:
                      type: object
                      required:
                        - comment
                        - description
                        - examples
                        - maxScore
                        - score
                        - testName
                      properties:
                        comment:
                          type: string
                        description:
                          type: string
                        examples:
                          type: array
                          items:
                            type: string
                        maxScore:
                          type: number
                        score:
                          type: number
                        testName:
                          type: string
                technicalCompetency:
                  type: object
                  required:
                    - codeQuality
                    - codingSpeed
                    - syntaxError
                  properties:
                    codeQuality:
                      type: object
                      required:
                        - comment
                        - description
                        - examples
                        - maxScore
                        - score
                        - testName
                      properties:
                        comment:
                          type: string
                        description:
                          type: string
                        examples:
                          type: array
                          items:
                            type: string
                        maxScore:
                          type: number
                        score:
                          type: number
                        testName:
                          type: string
                    codingSpeed:
                      type: object
                      required:
                        - comment
                        - description
                        - examples
                        - maxScore
                        - score
                        - testName
                      properties:
                        comment:
                          type: string
                        description:
                          type: string
                        examples:
                          type: array
                          items:
                            type: string
                        maxScore:
                          type: number
                        score:
                          type: number
                        testName:
                          type: string
                    syntaxError:
                      type: object
                      required:
                        - comment
                        - description
                        - examples
                        - maxScore
                        - score
                        - testName
                      properties:
                        comment:
                          type: string
                        description:
                          type: string
                        examples:
                          type: array
                          items:
                            type: string
                        maxScore:
                          type: number
                        score:
                          type: number
                        testName:
                          type: string
                testing:
                  type: object
                  required:
                    - debugging
                    - testCaseCoverage
                    - testCaseDesign
                  properties:
                    debugging:
                      type: object
                      required:
                        - comment
                        - description
                        - examples
                        - maxScore
                        - score
                        - testName
                      properties:
                        comment:
                          type: string
                        description:
                          type: string
                        examples:
                          type: array
                          items:
                            type: string
                        maxScore:
                          type: number
                        score:
                          type: number
                        testName:
                          type: string
                    testCaseCoverage:
                      type: object
                      required:
                        - comment
                        - description
                        - examples
                        - maxScore
                        - score
                        - testName
                      properties:
                        comment:
                          type: string
                        description:
                          type: string
                        examples:
                          type: array
                          items:
                            type: string
                        maxScore:
                          type: number
                        score:
                          type: number
                        testName:
                          type: string
                    testCaseDesign:
                      type: object
                      required:
                        - comment
                        - description
                        - examples
                        - maxScore
                        - score
                        - testName
                      properties:
                        comment:
                          type: string
                        description:
                          type: string
                        examples:
                          type: array
                          items:
                            type: string
                        maxScore:
                          type: number
                        score:
                          type: number
                        testName:
                          type: string
            sessionId:
              type: string
              description: ID from table "sessions"
            totalScore:
              type: number

    Response_eval.insertEvaluation:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    FailedResponse:
      type: object
      properties: {}
