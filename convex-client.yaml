openapi: 3.0.3
info:
  title: Convex App - OpenAPI 3.0
  version: 0.0.0
servers:
  - url: https://posh-chihuahua-941.convex.cloud
security:
  - bearerAuth: []
tags:
  - name: query
    description: Functions that read data
  - name: mutation
    description: Functions that write/update/delete data
  - name: action
    description: Functions that can make calls to external APIs
paths:
  /api/run/questions/getById:
    post:
      summary: Calls a query at the path questions.js:getById
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_questions.getById"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_questions.getById"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/questions/getAll:
    post:
      summary: Calls a query at the path questions.js:getAll
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_questions.getAll"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_questions.getAll"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/sessions/create:
    post:
      summary: Calls a mutation at the path sessions.js:create
      tags:
        - mutation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_sessions.create"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_sessions.create"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/sessions/exists:
    post:
      summary: Calls a query at the path sessions.js:exists
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_sessions.exists"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_sessions.exists"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/sessions/getById:
    post:
      summary: Calls a query at the path sessions.js:getById
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_sessions.getById"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_sessions.getById"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/editorSnapshots/create:
    post:
      summary: Calls a mutation at the path editorSnapshots.js:create
      tags:
        - mutation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_editorSnapshots.create"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_editorSnapshots.create"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/editorSnapshots/getById:
    post:
      summary: Calls a query at the path editorSnapshots.js:getById
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_editorSnapshots.getById"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_editorSnapshots.getById"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/editorSnapshots/getLatestSnapshotBySessionId:
    post:
      summary: Calls a query at the path editorSnapshots.js:getLatestSnapshotBySessionId
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_editorSnapshots.getLatestSnapshotBySessionId"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_editorSnapshots.getLatestSnapshotBySessionId"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/editorSnapshots/getSnapshots:
    post:
      summary: Calls a query at the path editorSnapshots.js:getSnapshots
      tags:
        - query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_editorSnapshots.getSnapshots"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_editorSnapshots.getSnapshots"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/actions/createAgentThread:
    post:
      summary: Calls a action at the path actions.js:createAgentThread
      tags:
        - action
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_actions.createAgentThread"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_actions.createAgentThread"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/actions/getToken:
    post:
      summary: Calls a action at the path actions.js:getToken
      tags:
        - action
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_actions.getToken"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_actions.getToken"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/actions/getEditorSnapshot:
    post:
      summary: Calls a action at the path actions.js:getEditorSnapshot
      tags:
        - action
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_actions.getEditorSnapshot"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_actions.getEditorSnapshot"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/actions/getSessionMetadata:
    post:
      summary: Calls a action at the path actions.js:getSessionMetadata
      tags:
        - action
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_actions.getSessionMetadata"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_actions.getSessionMetadata"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

  /api/run/codeRunner/runCode:
    post:
      summary: Calls a action at the path codeRunner.js:runCode
      tags:
        - action
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request_codeRunner.runCode"
        required: true
      responses:
        "200":
          description: Convex executed your request and returned a result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_codeRunner.runCode"
        "400":
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"
        "500":
          description: Convex Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Token of the format "Bearer {token}" for normal authentication and "Convex {token}" for admin tokens.
  schemas:
    Request_questions.getById:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          properties:
            questionId:
              type: string
              description: ID from table "questions"

    Response_questions.getById:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_questions.getByIdInternal:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - questionId
          properties:
            questionId:
              type: string
              description: ID from table "questions"

    Response_questions.getByIdInternal:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_questions.getAll:
      type: object
      required:
        - args
      properties:
        args: {}

    Response_questions.getAll:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_sessions.create:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - agentThreadId
            - assistantId
            - questionId
          properties:
            agentThreadId:
              type: string
            assistantId:
              type: string
            questionId:
              type: string
              description: ID from table "questions"

    Response_sessions.create:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_sessions.exists:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string

    Response_sessions.exists:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_sessions.getById:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_sessions.getById:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_sessions.getByIdInternal:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_sessions.getByIdInternal:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_editorSnapshots.create:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - editor
            - sessionId
            - terminal
          properties:
            editor:
              type: object
              required:
                - content
                - language
                - lastUpdated
              properties:
                content:
                  type: string
                language:
                  type: string
                lastUpdated:
                  type: number
            sessionId:
              type: string
              description: ID from table "sessions"
            terminal:
              type: object
              required:
                - isError
                - output
              properties:
                executionTime:
                  type: number
                isError:
                  type: boolean
                output:
                  type: string

    Response_editorSnapshots.create:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_editorSnapshots.getById:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          properties:
            snapshotId:
              type: string
              description: ID from table "editorSnapshots"

    Response_editorSnapshots.getById:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_editorSnapshots.getLatestSnapshotBySessionId:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_editorSnapshots.getLatestSnapshotBySessionId:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_editorSnapshots.getSnapshots:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_editorSnapshots.getSnapshots:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_editorSnapshots.getLatestSnapshotBySessionIdInternal:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_editorSnapshots.getLatestSnapshotBySessionIdInternal:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_actions.createAgentThread:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - graphId
          properties:
            graphId:
              type: string

    Response_actions.createAgentThread:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_actions.getToken:
      type: object
      required:
        - args
      properties:
        args: {}

    Response_actions.getToken:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    Request_actions.getEditorSnapshot:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_actions.getEditorSnapshot:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value:
          type: object
          required:
            - editor
            - sessionId
            - terminal
          properties:
            editor:
              type: object
              required:
                - content
                - language
                - lastUpdated
              properties:
                content:
                  type: string
                language:
                  type: string
                lastUpdated:
                  type: number
            sessionId:
              type: string
              description: ID from table "sessions"
            terminal:
              type: object
              required:
                - isError
                - output
              properties:
                executionTime:
                  type: number
                isError:
                  type: boolean
                output:
                  type: string

    Request_actions.getSessionMetadata:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - sessionId
          properties:
            sessionId:
              type: string
              description: ID from table "sessions"

    Response_actions.getSessionMetadata:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value:
          type: object
          required:
            - agent_thread_id
            - assistant_id
            - question_content
            - question_title
            - session_id
            - session_status
          properties:
            agent_thread_id:
              type: string
            assistant_id:
              type: string
            question_content:
              type: string
            question_title:
              type: string
            session_id:
              type: string
              description: ID from table "sessions"
            session_status:
              type: string

    Request_codeRunner.runCode:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          required:
            - code
            - language
            - questionId
          properties:
            code:
              type: string
            language:
              type: string
            questionId:
              type: string
              description: ID from table "questions"

    Response_codeRunner.runCode:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - "success"
            - "error"
        errorMessage:
          type: string
        errorData:
          type: object
        value: {}

    FailedResponse:
      type: object
      properties: {}
