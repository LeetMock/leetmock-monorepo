# coding: utf-8

"""
    Convex App - OpenAPI 3.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from convex_client.models.request_code_session_events_commit_code_session_event_args_event_one_of3_data_after_inner import RequestCodeSessionEventsCommitCodeSessionEventArgsEventOneOf3DataAfterInner
from convex_client.models.response_code_session_states_get_value_editor import ResponseCodeSessionStatesGetValueEditor
from convex_client.models.response_code_session_states_get_value_terminal import ResponseCodeSessionStatesGetValueTerminal
from typing import Optional, Set
from typing_extensions import Self

class ResponseCodeSessionStatesGetValue(BaseModel):
    """
    ResponseCodeSessionStatesGetValue
    """ # noqa: E501
    creation_time: Union[StrictFloat, StrictInt] = Field(alias="_creationTime")
    id: StrictStr = Field(description="ID from table \"codeSessionStates\"", alias="_id")
    current_stage_idx: Union[StrictFloat, StrictInt] = Field(alias="currentStageIdx")
    editor: ResponseCodeSessionStatesGetValueEditor
    session_id: StrictStr = Field(description="ID from table \"sessions\"", alias="sessionId")
    terminal: ResponseCodeSessionStatesGetValueTerminal
    testcases: List[RequestCodeSessionEventsCommitCodeSessionEventArgsEventOneOf3DataAfterInner]
    __properties: ClassVar[List[str]] = ["_creationTime", "_id", "currentStageIdx", "editor", "sessionId", "terminal", "testcases"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponseCodeSessionStatesGetValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of editor
        if self.editor:
            _dict['editor'] = self.editor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of terminal
        if self.terminal:
            _dict['terminal'] = self.terminal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in testcases (list)
        _items = []
        if self.testcases:
            for _item_testcases in self.testcases:
                if _item_testcases:
                    _items.append(_item_testcases.to_dict())
            _dict['testcases'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponseCodeSessionStatesGetValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_creationTime": obj.get("_creationTime"),
            "_id": obj.get("_id"),
            "currentStageIdx": obj.get("currentStageIdx"),
            "editor": ResponseCodeSessionStatesGetValueEditor.from_dict(obj["editor"]) if obj.get("editor") is not None else None,
            "sessionId": obj.get("sessionId"),
            "terminal": ResponseCodeSessionStatesGetValueTerminal.from_dict(obj["terminal"]) if obj.get("terminal") is not None else None,
            "testcases": [RequestCodeSessionEventsCommitCodeSessionEventArgsEventOneOf3DataAfterInner.from_dict(_item) for _item in obj["testcases"]] if obj.get("testcases") is not None else None
        })
        return _obj


