# coding: utf-8

"""
    Convex App - OpenAPI 3.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from convex_client.models.response_actions_scrape_question_value_solution import ResponseActionsScrapeQuestionValueSolution
from convex_client.models.response_actions_scrape_question_value_topic_tags_inner import ResponseActionsScrapeQuestionValueTopicTagsInner
from typing import Optional, Set
from typing_extensions import Self

class ResponseActionsScrapeQuestionValue(BaseModel):
    """
    ResponseActionsScrapeQuestionValue
    """ # noqa: E501
    company_tag_stats: StrictStr = Field(alias="companyTagStats")
    difficulty: StrictStr
    dislikes: Union[StrictFloat, StrictInt]
    example_testcases: StrictStr = Field(alias="exampleTestcases")
    hints: List[Any]
    is_paid_only: StrictBool = Field(alias="isPaidOnly")
    likes: Union[StrictFloat, StrictInt]
    link: StrictStr
    question: StrictStr
    question_frontend_id: StrictStr = Field(alias="questionFrontendId")
    question_id: StrictStr = Field(alias="questionId")
    question_title: StrictStr = Field(alias="questionTitle")
    similar_questions: StrictStr = Field(alias="similarQuestions")
    solution: ResponseActionsScrapeQuestionValueSolution
    title_slug: StrictStr = Field(alias="titleSlug")
    topic_tags: List[ResponseActionsScrapeQuestionValueTopicTagsInner] = Field(alias="topicTags")
    __properties: ClassVar[List[str]] = ["companyTagStats", "difficulty", "dislikes", "exampleTestcases", "hints", "isPaidOnly", "likes", "link", "question", "questionFrontendId", "questionId", "questionTitle", "similarQuestions", "solution", "titleSlug", "topicTags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponseActionsScrapeQuestionValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of solution
        if self.solution:
            _dict['solution'] = self.solution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in topic_tags (list)
        _items = []
        if self.topic_tags:
            for _item_topic_tags in self.topic_tags:
                if _item_topic_tags:
                    _items.append(_item_topic_tags.to_dict())
            _dict['topicTags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponseActionsScrapeQuestionValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "companyTagStats": obj.get("companyTagStats"),
            "difficulty": obj.get("difficulty"),
            "dislikes": obj.get("dislikes"),
            "exampleTestcases": obj.get("exampleTestcases"),
            "hints": obj.get("hints"),
            "isPaidOnly": obj.get("isPaidOnly"),
            "likes": obj.get("likes"),
            "link": obj.get("link"),
            "question": obj.get("question"),
            "questionFrontendId": obj.get("questionFrontendId"),
            "questionId": obj.get("questionId"),
            "questionTitle": obj.get("questionTitle"),
            "similarQuestions": obj.get("similarQuestions"),
            "solution": ResponseActionsScrapeQuestionValueSolution.from_dict(obj["solution"]) if obj.get("solution") is not None else None,
            "titleSlug": obj.get("titleSlug"),
            "topicTags": [ResponseActionsScrapeQuestionValueTopicTagsInner.from_dict(_item) for _item in obj["topicTags"]] if obj.get("topicTags") is not None else None
        })
        return _obj


