# coding: utf-8

"""
    Convex App - OpenAPI 3.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from convex_client.models.request_eval_insert_evaluation_args_scoreboards_communication import RequestEvalInsertEvaluationArgsScoreboardsCommunication
from convex_client.models.request_eval_insert_evaluation_args_scoreboards_problem_solving import RequestEvalInsertEvaluationArgsScoreboardsProblemSolving
from convex_client.models.request_eval_insert_evaluation_args_scoreboards_technical_competency import RequestEvalInsertEvaluationArgsScoreboardsTechnicalCompetency
from convex_client.models.request_eval_insert_evaluation_args_scoreboards_testing import RequestEvalInsertEvaluationArgsScoreboardsTesting
from typing import Optional, Set
from typing_extensions import Self

class RequestEvalInsertEvaluationArgsScoreboards(BaseModel):
    """
    RequestEvalInsertEvaluationArgsScoreboards
    """ # noqa: E501
    communication: RequestEvalInsertEvaluationArgsScoreboardsCommunication
    problem_solving: RequestEvalInsertEvaluationArgsScoreboardsProblemSolving = Field(alias="problemSolving")
    technical_competency: RequestEvalInsertEvaluationArgsScoreboardsTechnicalCompetency = Field(alias="technicalCompetency")
    testing: RequestEvalInsertEvaluationArgsScoreboardsTesting
    __properties: ClassVar[List[str]] = ["communication", "problemSolving", "technicalCompetency", "testing"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestEvalInsertEvaluationArgsScoreboards from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of communication
        if self.communication:
            _dict['communication'] = self.communication.to_dict()
        # override the default output from pydantic by calling `to_dict()` of problem_solving
        if self.problem_solving:
            _dict['problemSolving'] = self.problem_solving.to_dict()
        # override the default output from pydantic by calling `to_dict()` of technical_competency
        if self.technical_competency:
            _dict['technicalCompetency'] = self.technical_competency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of testing
        if self.testing:
            _dict['testing'] = self.testing.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestEvalInsertEvaluationArgsScoreboards from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "communication": RequestEvalInsertEvaluationArgsScoreboardsCommunication.from_dict(obj["communication"]) if obj.get("communication") is not None else None,
            "problemSolving": RequestEvalInsertEvaluationArgsScoreboardsProblemSolving.from_dict(obj["problemSolving"]) if obj.get("problemSolving") is not None else None,
            "technicalCompetency": RequestEvalInsertEvaluationArgsScoreboardsTechnicalCompetency.from_dict(obj["technicalCompetency"]) if obj.get("technicalCompetency") is not None else None,
            "testing": RequestEvalInsertEvaluationArgsScoreboardsTesting.from_dict(obj["testing"]) if obj.get("testing") is not None else None
        })
        return _obj


