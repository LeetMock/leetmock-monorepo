# coding: utf-8

"""
    Convex App - OpenAPI 3.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from convex_client.models.request_user_profiles_update_subscription_by_email_internal_args_interval import RequestUserProfilesUpdateSubscriptionByEmailInternalArgsInterval
from convex_client.models.request_user_profiles_update_subscription_by_email_internal_args_plan_name import RequestUserProfilesUpdateSubscriptionByEmailInternalArgsPlanName
from typing import Optional, Set
from typing_extensions import Self

class RequestUserProfilesUpdateSubscriptionByEmailInternalArgs(BaseModel):
    """
    RequestUserProfilesUpdateSubscriptionByEmailInternalArgs
    """ # noqa: E501
    current_period_end: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="currentPeriodEnd")
    current_period_start: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="currentPeriodStart")
    email: StrictStr
    evaluation_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="evaluationCount")
    interval: Optional[RequestUserProfilesUpdateSubscriptionByEmailInternalArgsInterval] = None
    latest_subscription_id: Optional[StrictStr] = Field(default=None, alias="latestSubscriptionId")
    minutes_remaining: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minutesRemaining")
    plan_name: Optional[RequestUserProfilesUpdateSubscriptionByEmailInternalArgsPlanName] = Field(default=None, alias="planName")
    refresh_date: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="refreshDate")
    subscription_status: Optional[StrictStr] = Field(default=None, alias="subscriptionStatus")
    __properties: ClassVar[List[str]] = ["currentPeriodEnd", "currentPeriodStart", "email", "evaluationCount", "interval", "latestSubscriptionId", "minutesRemaining", "planName", "refreshDate", "subscriptionStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestUserProfilesUpdateSubscriptionByEmailInternalArgs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of interval
        if self.interval:
            _dict['interval'] = self.interval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plan_name
        if self.plan_name:
            _dict['planName'] = self.plan_name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestUserProfilesUpdateSubscriptionByEmailInternalArgs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentPeriodEnd": obj.get("currentPeriodEnd"),
            "currentPeriodStart": obj.get("currentPeriodStart"),
            "email": obj.get("email"),
            "evaluationCount": obj.get("evaluationCount"),
            "interval": RequestUserProfilesUpdateSubscriptionByEmailInternalArgsInterval.from_dict(obj["interval"]) if obj.get("interval") is not None else None,
            "latestSubscriptionId": obj.get("latestSubscriptionId"),
            "minutesRemaining": obj.get("minutesRemaining"),
            "planName": RequestUserProfilesUpdateSubscriptionByEmailInternalArgsPlanName.from_dict(obj["planName"]) if obj.get("planName") is not None else None,
            "refreshDate": obj.get("refreshDate"),
            "subscriptionStatus": obj.get("subscriptionStatus")
        })
        return _obj


