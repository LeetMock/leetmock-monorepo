# coding: utf-8

"""
    Convex App - OpenAPI 3.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from convex_client.models.request_questions_create_question_args_eval_mode import RequestQuestionsCreateQuestionArgsEvalMode
from convex_client.models.request_questions_create_question_args_tests_inner import RequestQuestionsCreateQuestionArgsTestsInner
from typing import Optional, Set
from typing_extensions import Self

class RequestQuestionsCreateQuestionArgs(BaseModel):
    """
    RequestQuestionsCreateQuestionArgs
    """ # noqa: E501
    category: List[StrictStr]
    difficulty: Union[StrictFloat, StrictInt]
    eval_mode: RequestQuestionsCreateQuestionArgsEvalMode = Field(alias="evalMode")
    function_name: StrictStr = Field(alias="functionName")
    input_parameters: Dict[str, Any] = Field(alias="inputParameters")
    meta_data: Optional[Dict[str, Any]] = Field(default=None, alias="metaData")
    output_parameters: StrictStr = Field(alias="outputParameters")
    question: StrictStr
    solutions: Dict[str, Any]
    tests: List[RequestQuestionsCreateQuestionArgsTestsInner]
    title: StrictStr
    __properties: ClassVar[List[str]] = ["category", "difficulty", "evalMode", "functionName", "inputParameters", "metaData", "outputParameters", "question", "solutions", "tests", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestQuestionsCreateQuestionArgs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of eval_mode
        if self.eval_mode:
            _dict['evalMode'] = self.eval_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tests (list)
        _items = []
        if self.tests:
            for _item_tests in self.tests:
                if _item_tests:
                    _items.append(_item_tests.to_dict())
            _dict['tests'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestQuestionsCreateQuestionArgs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "difficulty": obj.get("difficulty"),
            "evalMode": RequestQuestionsCreateQuestionArgsEvalMode.from_dict(obj["evalMode"]) if obj.get("evalMode") is not None else None,
            "functionName": obj.get("functionName"),
            "inputParameters": obj.get("inputParameters"),
            "metaData": obj.get("metaData"),
            "outputParameters": obj.get("outputParameters"),
            "question": obj.get("question"),
            "solutions": obj.get("solutions"),
            "tests": [RequestQuestionsCreateQuestionArgsTestsInner.from_dict(_item) for _item in obj["tests"]] if obj.get("tests") is not None else None,
            "title": obj.get("title")
        })
        return _obj


