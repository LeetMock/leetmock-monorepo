# coding: utf-8

"""
    Convex App - OpenAPI 3.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from convex_client.models.request_sessions_create_code_session_args_interview_mode import RequestSessionsCreateCodeSessionArgsInterviewMode
from convex_client.models.request_sessions_create_code_session_args_interview_type import RequestSessionsCreateCodeSessionArgsInterviewType
from typing import Optional, Set
from typing_extensions import Self

class RequestSessionsCreateCodeSessionArgs(BaseModel):
    """
    RequestSessionsCreateCodeSessionArgs
    """ # noqa: E501
    agent_thread_id: StrictStr = Field(alias="agentThreadId")
    assistant_id: StrictStr = Field(alias="assistantId")
    interview_flow: List[StrictStr] = Field(alias="interviewFlow")
    interview_mode: RequestSessionsCreateCodeSessionArgsInterviewMode = Field(alias="interviewMode")
    interview_type: RequestSessionsCreateCodeSessionArgsInterviewType = Field(alias="interviewType")
    programming_language: StrictStr = Field(alias="programmingLanguage")
    question_id: StrictStr = Field(description="ID from table \"questions\"", alias="questionId")
    time_limit: Union[StrictFloat, StrictInt] = Field(alias="timeLimit")
    voice: StrictStr
    __properties: ClassVar[List[str]] = ["agentThreadId", "assistantId", "interviewFlow", "interviewMode", "interviewType", "programmingLanguage", "questionId", "timeLimit", "voice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestSessionsCreateCodeSessionArgs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of interview_mode
        if self.interview_mode:
            _dict['interviewMode'] = self.interview_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interview_type
        if self.interview_type:
            _dict['interviewType'] = self.interview_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestSessionsCreateCodeSessionArgs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentThreadId": obj.get("agentThreadId"),
            "assistantId": obj.get("assistantId"),
            "interviewFlow": obj.get("interviewFlow"),
            "interviewMode": RequestSessionsCreateCodeSessionArgsInterviewMode.from_dict(obj["interviewMode"]) if obj.get("interviewMode") is not None else None,
            "interviewType": RequestSessionsCreateCodeSessionArgsInterviewType.from_dict(obj["interviewType"]) if obj.get("interviewType") is not None else None,
            "programmingLanguage": obj.get("programmingLanguage"),
            "questionId": obj.get("questionId"),
            "timeLimit": obj.get("timeLimit"),
            "voice": obj.get("voice")
        })
        return _obj


