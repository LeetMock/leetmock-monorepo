# coding: utf-8

"""
    Convex App - OpenAPI 3.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ResponseActionsGetSessionMetadataValue(BaseModel):
    """
    ResponseActionsGetSessionMetadataValue
    """ # noqa: E501
    agent_thread_id: StrictStr = Field(alias="agentThreadId")
    assistant_id: StrictStr = Field(alias="assistantId")
    interview_flow: List[StrictStr] = Field(alias="interviewFlow")
    interview_mode: StrictStr = Field(alias="interviewMode")
    interview_type: StrictStr = Field(alias="interviewType")
    metadata: Dict[str, Any]
    programming_language: Optional[StrictStr] = Field(alias="programmingLanguage")
    question_content: StrictStr = Field(alias="questionContent")
    question_id: StrictStr = Field(description="ID from table \"questions\"", alias="questionId")
    question_title: StrictStr = Field(alias="questionTitle")
    session_id: StrictStr = Field(description="ID from table \"sessions\"", alias="sessionId")
    session_status: StrictStr = Field(alias="sessionStatus")
    voice: StrictStr
    __properties: ClassVar[List[str]] = ["agentThreadId", "assistantId", "interviewFlow", "interviewMode", "interviewType", "metadata", "programmingLanguage", "questionContent", "questionId", "questionTitle", "sessionId", "sessionStatus", "voice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponseActionsGetSessionMetadataValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if programming_language (nullable) is None
        # and model_fields_set contains the field
        if self.programming_language is None and "programming_language" in self.model_fields_set:
            _dict['programmingLanguage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponseActionsGetSessionMetadataValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentThreadId": obj.get("agentThreadId"),
            "assistantId": obj.get("assistantId"),
            "interviewFlow": obj.get("interviewFlow"),
            "interviewMode": obj.get("interviewMode"),
            "interviewType": obj.get("interviewType"),
            "metadata": obj.get("metadata"),
            "programmingLanguage": obj.get("programmingLanguage"),
            "questionContent": obj.get("questionContent"),
            "questionId": obj.get("questionId"),
            "questionTitle": obj.get("questionTitle"),
            "sessionId": obj.get("sessionId"),
            "sessionStatus": obj.get("sessionStatus"),
            "voice": obj.get("voice")
        })
        return _obj


