# coding: utf-8

"""
    Convex App - OpenAPI 3.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from convex_client.models.request_eval_insert_evaluation import RequestEvalInsertEvaluation

class TestRequestEvalInsertEvaluation(unittest.TestCase):
    """RequestEvalInsertEvaluation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RequestEvalInsertEvaluation:
        """Test RequestEvalInsertEvaluation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RequestEvalInsertEvaluation`
        """
        model = RequestEvalInsertEvaluation()
        if include_optional:
            return RequestEvalInsertEvaluation(
                args = convex_client.models.request_eval_insert_evaluation_args.Request_eval_insertEvaluation_args(
                    overall_feedback = '', 
                    scoreboards = convex_client.models.request_eval_insert_evaluation_args_scoreboards.Request_eval_insertEvaluation_args_scoreboards(
                        communication = convex_client.models.request_eval_insert_evaluation_args_scoreboards_communication.Request_eval_insertEvaluation_args_scoreboards_communication(
                            clarification = convex_client.models.request_eval_insert_evaluation_args_scoreboards_communication_clarification.Request_eval_insertEvaluation_args_scoreboards_communication_clarification(
                                comment = '', 
                                description = '', 
                                examples = [
                                    ''
                                    ], 
                                max_score = 1.337, 
                                score = 1.337, 
                                test_name = '', ), 
                            thought_process = convex_client.models.request_eval_insert_evaluation_args_scoreboards_communication_clarification.Request_eval_insertEvaluation_args_scoreboards_communication_clarification(
                                comment = '', 
                                description = '', 
                                examples = [
                                    ''
                                    ], 
                                max_score = 1.337, 
                                score = 1.337, 
                                test_name = '', ), ), 
                        problem_solving = convex_client.models.request_eval_insert_evaluation_args_scoreboards_problem_solving.Request_eval_insertEvaluation_args_scoreboards_problemSolving(
                            optimal_solution = , 
                            optimization_process = , 
                            question_specific = , ), 
                        technical_competency = convex_client.models.request_eval_insert_evaluation_args_scoreboards_technical_competency.Request_eval_insertEvaluation_args_scoreboards_technicalCompetency(
                            code_quality = , 
                            coding_speed = , 
                            syntax_error = , ), 
                        testing = convex_client.models.request_eval_insert_evaluation_args_scoreboards_testing.Request_eval_insertEvaluation_args_scoreboards_testing(
                            debugging = , 
                            test_case_coverage = , 
                            test_case_design = , ), ), 
                    session_id = '', 
                    total_score = 1.337, )
            )
        else:
            return RequestEvalInsertEvaluation(
                args = convex_client.models.request_eval_insert_evaluation_args.Request_eval_insertEvaluation_args(
                    overall_feedback = '', 
                    scoreboards = convex_client.models.request_eval_insert_evaluation_args_scoreboards.Request_eval_insertEvaluation_args_scoreboards(
                        communication = convex_client.models.request_eval_insert_evaluation_args_scoreboards_communication.Request_eval_insertEvaluation_args_scoreboards_communication(
                            clarification = convex_client.models.request_eval_insert_evaluation_args_scoreboards_communication_clarification.Request_eval_insertEvaluation_args_scoreboards_communication_clarification(
                                comment = '', 
                                description = '', 
                                examples = [
                                    ''
                                    ], 
                                max_score = 1.337, 
                                score = 1.337, 
                                test_name = '', ), 
                            thought_process = convex_client.models.request_eval_insert_evaluation_args_scoreboards_communication_clarification.Request_eval_insertEvaluation_args_scoreboards_communication_clarification(
                                comment = '', 
                                description = '', 
                                examples = [
                                    ''
                                    ], 
                                max_score = 1.337, 
                                score = 1.337, 
                                test_name = '', ), ), 
                        problem_solving = convex_client.models.request_eval_insert_evaluation_args_scoreboards_problem_solving.Request_eval_insertEvaluation_args_scoreboards_problemSolving(
                            optimal_solution = , 
                            optimization_process = , 
                            question_specific = , ), 
                        technical_competency = convex_client.models.request_eval_insert_evaluation_args_scoreboards_technical_competency.Request_eval_insertEvaluation_args_scoreboards_technicalCompetency(
                            code_quality = , 
                            coding_speed = , 
                            syntax_error = , ), 
                        testing = convex_client.models.request_eval_insert_evaluation_args_scoreboards_testing.Request_eval_insertEvaluation_args_scoreboards_testing(
                            debugging = , 
                            test_case_coverage = , 
                            test_case_design = , ), ), 
                    session_id = '', 
                    total_score = 1.337, ),
        )
        """

    def testRequestEvalInsertEvaluation(self):
        """Test RequestEvalInsertEvaluation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
