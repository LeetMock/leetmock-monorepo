# coding: utf-8

"""
    Convex App - OpenAPI 3.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from convex_client.models.request_questions_create_question import RequestQuestionsCreateQuestion

class TestRequestQuestionsCreateQuestion(unittest.TestCase):
    """RequestQuestionsCreateQuestion unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RequestQuestionsCreateQuestion:
        """Test RequestQuestionsCreateQuestion
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RequestQuestionsCreateQuestion`
        """
        model = RequestQuestionsCreateQuestion()
        if include_optional:
            return RequestQuestionsCreateQuestion(
                args = convex_client.models.request_questions_create_question_args.Request_questions_createQuestion_args(
                    category = [
                        ''
                        ], 
                    difficulty = 1.337, 
                    eval_mode = null, 
                    function_name = '', 
                    input_parameters = convex_client.models.input_parameters.inputParameters(), 
                    meta_data = convex_client.models.meta_data.metaData(), 
                    output_parameters = '', 
                    question = '', 
                    solutions = convex_client.models.solutions.solutions(), 
                    tests = [
                        convex_client.models.request_questions_create_question_args_tests_inner.Request_questions_createQuestion_args_tests_inner(
                            input = null, 
                            output = null, )
                        ], 
                    title = '', )
            )
        else:
            return RequestQuestionsCreateQuestion(
                args = convex_client.models.request_questions_create_question_args.Request_questions_createQuestion_args(
                    category = [
                        ''
                        ], 
                    difficulty = 1.337, 
                    eval_mode = null, 
                    function_name = '', 
                    input_parameters = convex_client.models.input_parameters.inputParameters(), 
                    meta_data = convex_client.models.meta_data.metaData(), 
                    output_parameters = '', 
                    question = '', 
                    solutions = convex_client.models.solutions.solutions(), 
                    tests = [
                        convex_client.models.request_questions_create_question_args_tests_inner.Request_questions_createQuestion_args_tests_inner(
                            input = null, 
                            output = null, )
                        ], 
                    title = '', ),
        )
        """

    def testRequestQuestionsCreateQuestion(self):
        """Test RequestQuestionsCreateQuestion"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
