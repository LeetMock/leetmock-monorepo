# coding: utf-8

"""
    Convex App - OpenAPI 3.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from convex_client.models.response_actions_scrape_question import ResponseActionsScrapeQuestion

class TestResponseActionsScrapeQuestion(unittest.TestCase):
    """ResponseActionsScrapeQuestion unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResponseActionsScrapeQuestion:
        """Test ResponseActionsScrapeQuestion
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ResponseActionsScrapeQuestion`
        """
        model = ResponseActionsScrapeQuestion()
        if include_optional:
            return ResponseActionsScrapeQuestion(
                status = 'success',
                error_message = '',
                error_data = None,
                value = convex_client.models.response_actions_scrape_question_value.Response_actions_scrapeQuestion_value(
                    company_tag_stats = '', 
                    difficulty = '', 
                    dislikes = 1.337, 
                    example_testcases = '', 
                    hints = [
                        null
                        ], 
                    is_paid_only = True, 
                    likes = 1.337, 
                    link = '', 
                    question = '', 
                    question_frontend_id = '', 
                    question_id = '', 
                    question_title = '', 
                    similar_questions = '', 
                    solution = convex_client.models.response_actions_scrape_question_value_solution.Response_actions_scrapeQuestion_value_solution(
                        can_see_detail = True, 
                        has_video_solution = True, 
                        id = '', 
                        paid_only = True, 
                        paid_only_video = True, ), 
                    title_slug = '', 
                    topic_tags = [
                        convex_client.models.response_actions_scrape_question_value_topic_tags_inner.Response_actions_scrapeQuestion_value_topicTags_inner(
                            name = '', 
                            slug = '', 
                            translated_name = '', )
                        ], )
            )
        else:
            return ResponseActionsScrapeQuestion(
                status = 'success',
        )
        """

    def testResponseActionsScrapeQuestion(self):
        """Test ResponseActionsScrapeQuestion"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
