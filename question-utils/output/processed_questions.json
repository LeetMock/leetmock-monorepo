[
  {
    "category": ["Math", "String"],
    "difficulty": 1,
    "evalMode": "exactMatch",
    "question": "<p>For two strings <code>s</code> and <code>t</code>, we say &quot;<code>t</code> divides <code>s</code>&quot; if and only if <code>s = t + t + t + ... + t + t</code> (i.e., <code>t</code> is concatenated with itself one or more times).</p>\n\n<p>Given two strings <code>str1</code> and <code>str2</code>, return <em>the largest string </em><code>x</code><em> such that </em><code>x</code><em> divides both </em><code>str1</code><em> and </em><code>str2</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> str1 = &quot;ABCABC&quot;, str2 = &quot;ABC&quot;\n<strong>Output:</strong> &quot;ABC&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> str1 = &quot;ABABAB&quot;, str2 = &quot;ABAB&quot;\n<strong>Output:</strong> &quot;AB&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> str1 = &quot;LEET&quot;, str2 = &quot;CODE&quot;\n<strong>Output:</strong> &quot;&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= str1.length, str2.length &lt;= 1000</code></li>\n\t<li><code>str1</code> and <code>str2</code> consist of English uppercase letters.</li>\n</ul>\n",
    "solutions": {},
    "functionName": "findLargestCommonDivisorString",
    "inputParameters": {
      "cpp": ["str1", "string", "str2", "string"],
      "java": ["str1", "String", "str2", "String"],
      "javascript": ["str1", "string", "str2", "string"],
      "python": ["str1", "str", "str2", "str"]
    },
    "tests": [
      {
        "input": {
          "str1": "ABCABC",
          "str2": "ABC"
        },
        "output": "ABC"
      },
      {
        "input": {
          "str1": "ABABAB",
          "str2": "ABAB"
        },
        "output": "AB"
      },
      {
        "input": {
          "str1": "LEET",
          "str2": "CODE"
        },
        "output": ""
      },
      {
        "input": {
          "str1": "TAUXXTAUXXTAUXXTAUXXTAUXX",
          "str2": "TAUXXTAUXXTAUXXTAUXX"
        },
        "output": "TAUXX"
      },
      {
        "input": {
          "str1": "ABCDEF",
          "str2": "ABC"
        },
        "output": ""
      },
      {
        "input": {
          "str1": "AAAAAAAAA",
          "str2": "AAACCC"
        },
        "output": ""
      },
      {
        "input": {
          "str1": "ABABABAB",
          "str2": "ABAB"
        },
        "output": "ABAB"
      },
      {
        "input": {
          "str1": "X",
          "str2": "X"
        },
        "output": "X"
      },
      {
        "input": {
          "str1": "XXXX",
          "str2": "XX"
        },
        "output": "XX"
      },
      {
        "input": {
          "str1": "AAAAABBBBB",
          "str2": "ABABABAB"
        },
        "output": ""
      }
    ],
    "title": "Greatest Common Divisor of Strings",
    "metaData": {}
  },
  {
    "category": ["Array"],
    "difficulty": 1,
    "evalMode": "exactMatch",
    "question": "<p>There are <code>n</code> kids with candies. You are given an integer array <code>candies</code>, where each <code>candies[i]</code> represents the number of candies the <code>i<sup>th</sup></code> kid has, and an integer <code>extraCandies</code>, denoting the number of extra candies that you have.</p>\n\n<p>Return <em>a boolean array </em><code>result</code><em> of length </em><code>n</code><em>, where </em><code>result[i]</code><em> is </em><code>true</code><em> if, after giving the </em><code>i<sup>th</sup></code><em> kid all the </em><code>extraCandies</code><em>, they will have the <strong>greatest</strong> number of candies among all the kids</em><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>Note that <strong>multiple</strong> kids can have the <strong>greatest</strong> number of candies.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candies = [2,3,5,1,3], extraCandies = 3\n<strong>Output:</strong> [true,true,true,false,true] \n<strong>Explanation:</strong> If you give all extraCandies to:\n- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.\n- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.\n- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.\n- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candies = [4,2,1,1,2], extraCandies = 1\n<strong>Output:</strong> [true,false,false,false,false] \n<strong>Explanation:</strong> There is only 1 extra candy.\nKid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> candies = [12,1,12], extraCandies = 10\n<strong>Output:</strong> [true,false,true]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == candies.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= candies[i] &lt;= 100</code></li>\n\t<li><code>1 &lt;= extraCandies &lt;= 50</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "kidsWithCandiesGreatestAfterExtra",
    "inputParameters": {
      "cpp": ["candies", "vector<int>", "extraCandies", "int"],
      "java": ["candies", "int[]", "extraCandies", "int"],
      "javascript": ["candies", "number[]", "extraCandies", "number"],
      "python": ["candies", "List[int]", "extraCandies", "int"]
    },
    "tests": [
      {
        "input": {
          "candies": [2, 3, 5, 1, 3],
          "extraCandies": 3
        },
        "output": [true, true, true, false, true]
      },
      {
        "input": {
          "candies": [4, 2, 1, 1, 2],
          "extraCandies": 1
        },
        "output": [true, false, false, false, false]
      },
      {
        "input": {
          "candies": [12, 1, 12],
          "extraCandies": 10
        },
        "output": [true, false, true]
      },
      {
        "input": {
          "candies": [1, 1, 1, 1],
          "extraCandies": 1
        },
        "output": [true, true, true, true]
      },
      {
        "input": {
          "candies": [1, 2, 3, 4, 5],
          "extraCandies": 5
        },
        "output": [true, true, true, true, true]
      },
      {
        "input": {
          "candies": [10, 1],
          "extraCandies": 8
        },
        "output": [true, false]
      },
      {
        "input": {
          "candies": [1, 1, 1, 1, 1],
          "extraCandies": 0
        },
        "output": [true, true, true, true, true]
      },
      {
        "input": {
          "candies": [100],
          "extraCandies": 50
        },
        "output": [true]
      },
      {
        "input": {
          "candies": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
          "extraCandies": 1
        },
        "output": [false, false, false, false, false, false, false, false, false, true]
      },
      {
        "input": {
          "candies": [5, 5, 5, 5, 5],
          "extraCandies": 2
        },
        "output": [true, true, true, true, true]
      }
    ],
    "title": "Kids With the Greatest Number of Candies",
    "metaData": {}
  },
  {
    "category": ["Array", "Greedy"],
    "difficulty": 1,
    "evalMode": "exactMatch",
    "question": "<p>You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in <strong>adjacent</strong> plots.</p>\n\n<p>Given an integer array <code>flowerbed</code> containing <code>0</code>&#39;s and <code>1</code>&#39;s, where <code>0</code> means empty and <code>1</code> means not empty, and an integer <code>n</code>, return <code>true</code>&nbsp;<em>if</em> <code>n</code> <em>new flowers can be planted in the</em> <code>flowerbed</code> <em>without violating the no-adjacent-flowers rule and</em> <code>false</code> <em>otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> flowerbed = [1,0,0,0,1], n = 1\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> flowerbed = [1,0,0,0,1], n = 2\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= flowerbed.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>flowerbed[i]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li>There are no two adjacent flowers in <code>flowerbed</code>.</li>\n\t<li><code>0 &lt;= n &lt;= flowerbed.length</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "canPlaceFlowers",
    "inputParameters": {
      "cpp": ["flowerbed", "vector<int>", "n", "int"],
      "java": ["flowerbed", "int[]", "n", "int"],
      "javascript": ["flowerbed", "number[]", "n", "number"],
      "python": ["flowerbed", "List[int]", "n", "int"]
    },
    "tests": [
      {
        "input": {
          "flowerbed": [1, 0, 0, 0, 1],
          "n": 1
        },
        "output": true
      },
      {
        "input": {
          "flowerbed": [1, 0, 0, 0, 1],
          "n": 2
        },
        "output": false
      },
      {
        "input": {
          "flowerbed": [0, 0, 0, 0, 0],
          "n": 3
        },
        "output": true
      },
      {
        "input": {
          "flowerbed": [1, 0, 0, 0, 0, 0, 1],
          "n": 2
        },
        "output": true
      },
      {
        "input": {
          "flowerbed": [0],
          "n": 1
        },
        "output": true
      },
      {
        "input": {
          "flowerbed": [1],
          "n": 0
        },
        "output": true
      },
      {
        "input": {
          "flowerbed": [0, 0, 1, 0, 1],
          "n": 1
        },
        "output": true
      },
      {
        "input": {
          "flowerbed": [1, 0, 1, 0, 1, 0, 1],
          "n": 0
        },
        "output": true
      },
      {
        "input": {
          "flowerbed": [0, 0, 0, 0],
          "n": 3
        },
        "output": false
      },
      {
        "input": {
          "flowerbed": [1, 0, 0, 0, 1, 0, 0],
          "n": 2
        },
        "output": true
      }
    ],
    "title": "Can Place Flowers",
    "metaData": {}
  },
  {
    "category": ["Two Pointers", "String"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>Given an input string <code>s</code>, reverse the order of the <strong>words</strong>.</p>\n\n<p>A <strong>word</strong> is defined as a sequence of non-space characters. The <strong>words</strong> in <code>s</code> will be separated by at least one space.</p>\n\n<p>Return <em>a string of the words in reverse order concatenated by a single space.</em></p>\n\n<p><b>Note</b> that <code>s</code> may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;the sky is blue&quot;\n<strong>Output:</strong> &quot;blue is sky the&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;  hello world  &quot;\n<strong>Output:</strong> &quot;world hello&quot;\n<strong>Explanation:</strong> Your reversed string should not contain leading or trailing spaces.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a good   example&quot;\n<strong>Output:</strong> &quot;example good a&quot;\n<strong>Explanation:</strong> You need to reduce multiple spaces between two words to a single space in the reversed string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> contains English letters (upper-case and lower-case), digits, and spaces <code>&#39; &#39;</code>.</li>\n\t<li>There is <strong>at least one</strong> word in <code>s</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><b data-stringify-type=\"bold\">Follow-up:&nbsp;</b>If the string data type is mutable in your language, can&nbsp;you solve it&nbsp;<b data-stringify-type=\"bold\">in-place</b>&nbsp;with&nbsp;<code data-stringify-type=\"code\">O(1)</code>&nbsp;extra space?</p>\n",
    "solutions": {},
    "functionName": "reverseWordsInString",
    "inputParameters": {
      "cpp": ["s", "string"],
      "java": ["s", "String"],
      "javascript": ["s", "string"],
      "python": ["s", "str"]
    },
    "tests": [
      {
        "input": {
          "s": "the sky is blue"
        },
        "output": "blue is sky the"
      },
      {
        "input": {
          "s": "  hello world  "
        },
        "output": "world hello"
      },
      {
        "input": {
          "s": "a good   example"
        },
        "output": "example good a"
      },
      {
        "input": {
          "s": "  Bob    Loves  Alice   "
        },
        "output": "Alice Loves Bob"
      },
      {
        "input": {
          "s": "Alice does not     even like bob"
        },
        "output": "bob like even not does Alice"
      },
      {
        "input": {
          "s": "Reverse these words"
        },
        "output": "words these Reverse"
      },
      {
        "input": {
          "s": "   "
        },
        "output": ""
      },
      {
        "input": {
          "s": "a"
        },
        "output": "a"
      },
      {
        "input": {
          "s": "  42  "
        },
        "output": "42"
      },
      {
        "input": {
          "s": "I love programming very much"
        },
        "output": "much very programming love I"
      }
    ],
    "title": "Reverse Words in a String",
    "metaData": {}
  },
  {
    "category": ["Array", "Prefix Sum"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>Given an integer array <code>nums</code>, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is equal to the product of all the elements of</em> <code>nums</code> <em>except</em> <code>nums[i]</code>.</p>\n\n<p>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</p>\n\n<p>You must write an algorithm that runs in&nbsp;<code>O(n)</code>&nbsp;time and without using the division operation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> [24,12,8,6]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [-1,1,0,-3,3]\n<strong>Output:</strong> [0,0,9,0,0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-30 &lt;= nums[i] &lt;= 30</code></li>\n\t<li>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong>&nbsp;Can you solve the problem in <code>O(1)</code>&nbsp;extra&nbsp;space complexity? (The output array <strong>does not</strong> count as extra space for space complexity analysis.)</p>\n",
    "solutions": {},
    "functionName": "productExceptSelf",
    "inputParameters": {
      "cpp": ["nums", "vector<int>"],
      "java": ["nums", "int[]"],
      "javascript": ["nums", "number[]"],
      "python": ["nums", "List[int]"]
    },
    "tests": [
      {
        "input": {
          "nums": [1, 2, 3, 4]
        },
        "output": [24, 12, 8, 6]
      },
      {
        "input": {
          "nums": [-1, 1, 0, -3, 3]
        },
        "output": [0, 0, 9, 0, 0]
      },
      {
        "input": {
          "nums": [1, 1, 1, 1]
        },
        "output": [1, 1, 1, 1]
      },
      {
        "input": {
          "nums": [2, 3, 4, 5, 6]
        },
        "output": [360, 240, 180, 144, 120]
      },
      {
        "input": {
          "nums": [-2, -3, -4, -5]
        },
        "output": [-60, -40, -30, -24]
      },
      {
        "input": {
          "nums": [0, 0, 0, 0, 0]
        },
        "output": [0, 0, 0, 0, 0]
      },
      {
        "input": {
          "nums": [1, 0, 1, 0, 1]
        },
        "output": [0, 1, 0, 1, 0]
      },
      {
        "input": {
          "nums": [10, 5]
        },
        "output": [5, 10]
      },
      {
        "input": {
          "nums": [-1, -1, 0, 1, 1]
        },
        "output": [0, 0, 1, 0, 0]
      },
      {
        "input": {
          "nums": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        },
        "output": [
          3628800, 1814400, 1209600, 907200, 725760, 604800, 518400, 453600, 403200, 362880
        ]
      }
    ],
    "title": "Product of Array Except Self",
    "metaData": {}
  },
  {
    "category": ["Array", "Greedy"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>Given an integer array <code>nums</code>, return <code>true</code><em> if there exists a triple of indices </em><code>(i, j, k)</code><em> such that </em><code>i &lt; j &lt; k</code><em> and </em><code>nums[i] &lt; nums[j] &lt; nums[k]</code>. If no such indices exists, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Any triplet where i &lt; j &lt; k is valid.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,3,2,1]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> No triplet exists.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,5,0,4,6]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The triplet (3, 4, 5) is valid because nums[3] == 0 &lt; nums[4] == 4 &lt; nums[5] == 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you implement a solution that runs in <code>O(n)</code> time complexity and <code>O(1)</code> space complexity?",
    "solutions": {},
    "functionName": "hasIncreasingTriplet",
    "inputParameters": {
      "cpp": ["nums", "vector<int>"],
      "java": ["nums", "int[]"],
      "javascript": ["nums", "number[]"],
      "python": ["nums", "List[int]"]
    },
    "tests": [
      {
        "input": {
          "nums": [1, 2, 3, 4, 5]
        },
        "output": true
      },
      {
        "input": {
          "nums": [5, 4, 3, 2, 1]
        },
        "output": false
      },
      {
        "input": {
          "nums": [2, 1, 5, 0, 4, 6]
        },
        "output": true
      },
      {
        "input": {
          "nums": [1, 1, 1, 1, 1, 1]
        },
        "output": false
      },
      {
        "input": {
          "nums": [1, 5, 0, 4, 1, 3]
        },
        "output": true
      },
      {
        "input": {
          "nums": [20, 100, 10, 12, 5, 13]
        },
        "output": true
      },
      {
        "input": {
          "nums": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        },
        "output": true
      },
      {
        "input": {
          "nums": [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
        },
        "output": false
      },
      {
        "input": {
          "nums": [1, 4, 0, 1, 2, 3]
        },
        "output": true
      },
      {
        "input": {
          "nums": [1]
        },
        "output": false
      }
    ],
    "title": "Increasing Triplet Subsequence",
    "metaData": {}
  },
  {
    "category": ["Two Pointers", "String"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>Given an array of characters <code>chars</code>, compress it using the following algorithm:</p>\n\n<p>Begin with an empty string <code>s</code>. For each group of <strong>consecutive repeating characters</strong> in <code>chars</code>:</p>\n\n<ul>\n\t<li>If the group&#39;s length is <code>1</code>, append the character to <code>s</code>.</li>\n\t<li>Otherwise, append the character followed by the group&#39;s length.</li>\n</ul>\n\n<p>The compressed string <code>s</code> <strong>should not be returned separately</strong>, but instead, be stored <strong>in the input character array <code>chars</code></strong>. Note that group lengths that are <code>10</code> or longer will be split into multiple characters in <code>chars</code>.</p>\n\n<p>After you are done <strong>modifying the input array,</strong> return <em>the new length of the array</em>.</p>\n\n<p>You must write an algorithm that uses only constant extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]\n<strong>Output:</strong> Return 6, and the first 6 characters of the input array should be: [&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]\n<strong>Explanation:</strong> The groups are &quot;aa&quot;, &quot;bb&quot;, and &quot;ccc&quot;. This compresses to &quot;a2b2c3&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;]\n<strong>Output:</strong> Return 1, and the first character of the input array should be: [&quot;a&quot;]\n<strong>Explanation:</strong> The only group is &quot;a&quot;, which remains uncompressed since it&#39;s a single character.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]\n<strong>Output:</strong> Return 4, and the first 4 characters of the input array should be: [&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;].\n<strong>Explanation:</strong> The groups are &quot;a&quot; and &quot;bbbbbbbbbbbb&quot;. This compresses to &quot;ab12&quot;.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= chars.length &lt;= 2000</code></li>\n\t<li><code>chars[i]</code> is a lowercase English letter, uppercase English letter, digit, or symbol.</li>\n</ul>\n",
    "solutions": {},
    "functionName": "compressCharArray",
    "inputParameters": {
      "cpp": ["chars", "vector<char>&"],
      "java": ["chars", "char[]"],
      "javascript": ["chars", "character[]"],
      "python": ["chars", "List[str]"]
    },
    "tests": [
      {
        "input": {
          "chars": ["a", "a", "b", "b", "c", "c", "c"]
        },
        "output": 6
      },
      {
        "input": {
          "chars": ["a"]
        },
        "output": 1
      },
      {
        "input": {
          "chars": ["a", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b"]
        },
        "output": 4
      },
      {
        "input": {
          "chars": ["a", "a", "a", "b", "b", "a", "a"]
        },
        "output": 6
      },
      {
        "input": {
          "chars": ["a", "b", "c", "d", "e"]
        },
        "output": 5
      },
      {
        "input": {
          "chars": ["a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a"]
        },
        "output": 3
      },
      {
        "input": {
          "chars": ["a", "b", "b", "c", "c", "c"]
        },
        "output": 5
      },
      {
        "input": {
          "chars": ["a", "2", "b", "2", "c", "3"]
        },
        "output": 6
      },
      {
        "input": {
          "chars": [
            "a",
            "a",
            "a",
            "a",
            "a",
            "a",
            "b",
            "b",
            "b",
            "b",
            "b",
            "b",
            "b",
            "b",
            "b",
            "b",
            "c",
            "c",
            "c",
            "c",
            "c",
            "c",
            "c",
            "c",
            "c",
            "c"
          ]
        },
        "output": 8
      },
      {
        "input": {
          "chars": ["#", "#", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*"]
        },
        "output": 5
      }
    ],
    "title": "String Compression",
    "metaData": {}
  },
  {
    "category": ["Array", "Two Pointers"],
    "difficulty": 1,
    "evalMode": "exactMatch",
    "question": "<p>Given an integer array <code>nums</code>, move all <code>0</code>&#39;s to the end of it while maintaining the relative order of the non-zero elements.</p>\n\n<p><strong>Note</strong> that you must do this in-place without making a copy of the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [0,1,0,3,12]\n<strong>Output:</strong> [1,3,12,0,0]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [0]\n<strong>Output:</strong> [0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you minimize the total number of operations done?",
    "solutions": {},
    "functionName": "moveZeroesToEnd",
    "inputParameters": {
      "cpp": ["nums", "vector<int>&"],
      "java": ["nums", "int[]"],
      "javascript": ["nums", "number[]"],
      "python": ["nums", "List[int]"]
    },
    "tests": [
      {
        "input": {
          "nums": [0, 1, 0, 3, 12]
        },
        "output": [1, 3, 12, 0, 0]
      },
      {
        "input": {
          "nums": [0]
        },
        "output": [0]
      },
      {
        "input": {
          "nums": [1, 2, 3, 4, 5]
        },
        "output": [1, 2, 3, 4, 5]
      },
      {
        "input": {
          "nums": [0, 0, 0, 0, 1]
        },
        "output": [1, 0, 0, 0, 0]
      },
      {
        "input": {
          "nums": [1, 0, 0, 0, 0]
        },
        "output": [1, 0, 0, 0, 0]
      },
      {
        "input": {
          "nums": [1, 2, 0, 3, 0, 4, 0, 5]
        },
        "output": [1, 2, 3, 4, 5, 0, 0, 0]
      },
      {
        "input": {
          "nums": [-1, 0, 2, -3, 0, 4, 0, -5]
        },
        "output": [-1, 2, -3, 4, -5, 0, 0, 0]
      },
      {
        "input": {
          "nums": [0, 0, 0]
        },
        "output": [0, 0, 0]
      },
      {
        "input": {
          "nums": [1]
        },
        "output": [1]
      },
      {
        "input": {
          "nums": [9, 0, 9, 0, 9, 0]
        },
        "output": [9, 9, 9, 0, 0, 0]
      }
    ],
    "title": "Move Zeroes",
    "metaData": {}
  },
  {
    "category": ["Two Pointers", "String", "Dynamic Programming"],
    "difficulty": 1,
    "evalMode": "exactMatch",
    "question": "<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code><em> if </em><code>s</code><em> is a <strong>subsequence</strong> of </em><code>t</code><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>A <strong>subsequence</strong> of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;<u>a</u>b<u>c</u>d<u>e</u>&quot;</code> while <code>&quot;aec&quot;</code> is not).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"abc\", t = \"ahbgdc\"\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"axc\", t = \"ahbgdc\"\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= t.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist only of lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Suppose there are lots of incoming <code>s</code>, say <code>s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>k</sub></code> where <code>k &gt;= 10<sup>9</sup></code>, and you want to check one by one to see if <code>t</code> has its subsequence. In this scenario, how would you change your code?",
    "solutions": {},
    "functionName": "isSubsequence",
    "inputParameters": {
      "cpp": ["s", "string", "t", "string"],
      "java": ["s", "String", "t", "String"],
      "javascript": ["s", "string", "t", "string"],
      "python": ["s", "str", "t", "str"]
    },
    "tests": [
      {
        "input": {
          "s": "abc",
          "t": "ahbgdc"
        },
        "output": true
      },
      {
        "input": {
          "s": "axc",
          "t": "ahbgdc"
        },
        "output": false
      },
      {
        "input": {
          "s": "",
          "t": "ahbgdc"
        },
        "output": true
      },
      {
        "input": {
          "s": "abc",
          "t": ""
        },
        "output": false
      },
      {
        "input": {
          "s": "abc",
          "t": "abc"
        },
        "output": true
      },
      {
        "input": {
          "s": "abcde",
          "t": "ace"
        },
        "output": false
      },
      {
        "input": {
          "s": "aaaaaa",
          "t": "bbaaaa"
        },
        "output": false
      },
      {
        "input": {
          "s": "leetcode",
          "t": "yleetcode"
        },
        "output": true
      },
      {
        "input": {
          "s": "b",
          "t": "abc"
        },
        "output": true
      },
      {
        "input": {
          "s": "aec",
          "t": "abcde"
        },
        "output": false
      }
    ],
    "title": "Is Subsequence",
    "metaData": {}
  },
  {
    "category": ["Array", "Two Pointers", "Greedy"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>i<sup>th</sup></code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p>\n\n<p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p>\n\n<p>Return <em>the maximum amount of water a container can store</em>.</p>\n\n<p><strong>Notice</strong> that you may not slant the container.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" style=\"width: 600px; height: 287px;\" />\n<pre>\n<strong>Input:</strong> height = [1,8,6,2,5,4,8,3,7]\n<strong>Output:</strong> 49\n<strong>Explanation:</strong> The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [1,1]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "maxAreaContainer",
    "inputParameters": {
      "cpp": ["height", "vector<int>"],
      "java": ["height", "int[]"],
      "javascript": ["height", "number[]"],
      "python": ["height", "List[int]"]
    },
    "tests": [
      {
        "input": {
          "height": [1, 8, 6, 2, 5, 4, 8, 3, 7]
        },
        "output": 49
      },
      {
        "input": {
          "height": [1, 1]
        },
        "output": 1
      },
      {
        "input": {
          "height": [4, 3, 2, 1, 4]
        },
        "output": 16
      },
      {
        "input": {
          "height": [1, 2, 1]
        },
        "output": 2
      },
      {
        "input": {
          "height": [1, 8, 6, 2, 5, 4, 8, 25, 7]
        },
        "output": 49
      },
      {
        "input": {
          "height": [2, 3, 4, 5, 18, 17, 6]
        },
        "output": 17
      },
      {
        "input": {
          "height": [1, 3, 2, 5, 25, 24, 5]
        },
        "output": 24
      },
      {
        "input": {
          "height": [1, 1, 1, 1, 1, 1, 1, 1]
        },
        "output": 7
      },
      {
        "input": {
          "height": [10000, 1, 1, 1, 1, 1, 1, 10000]
        },
        "output": 70000
      },
      {
        "input": {
          "height": [2, 3, 10, 5, 7, 8, 9, 1]
        },
        "output": 36
      }
    ],
    "title": "Container With Most Water",
    "metaData": {}
  },
  {
    "category": ["Array", "Hash Table", "Two Pointers", "Sorting"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>You are given an integer array <code>nums</code> and an integer <code>k</code>.</p>\n\n<p>In one operation, you can pick two numbers from the array whose sum equals <code>k</code> and remove them from the array.</p>\n\n<p>Return <em>the maximum number of operations you can perform on the array</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4], k = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Starting with nums = [1,2,3,4]:\n- Remove numbers 1 and 4, then nums = [2,3]\n- Remove numbers 2 and 3, then nums = []\nThere are no more pairs that sum up to 5, hence a total of 2 operations.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,3,4,3], k = 6\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Starting with nums = [3,1,3,4,3]:\n- Remove the first two 3&#39;s, then nums = [1,4,3]\nThere are no more pairs that sum up to 6, hence a total of 1 operation.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "maxKSumPairs",
    "inputParameters": {
      "cpp": ["nums", "vector<int>", "k", "int"],
      "java": ["nums", "int[]", "k", "int"],
      "javascript": ["nums", "number[]", "k", "number"],
      "python": ["nums", "List[int]", "k", "int"]
    },
    "tests": [
      {
        "input": {
          "nums": [1, 2, 3, 4],
          "k": 5
        },
        "output": 2
      },
      {
        "input": {
          "nums": [3, 1, 3, 4, 3],
          "k": 6
        },
        "output": 1
      },
      {
        "input": {
          "nums": [1, 1, 1, 1],
          "k": 2
        },
        "output": 2
      },
      {
        "input": {
          "nums": [1, 2, 3, 4, 5, 6],
          "k": 7
        },
        "output": 3
      },
      {
        "input": {
          "nums": [1, 1, 2, 2, 3, 3],
          "k": 4
        },
        "output": 3
      },
      {
        "input": {
          "nums": [10, 10, 10, 10, 10],
          "k": 20
        },
        "output": 2
      },
      {
        "input": {
          "nums": [1, 2, 3, 4, 5],
          "k": 10
        },
        "output": 0
      },
      {
        "input": {
          "nums": [1],
          "k": 1
        },
        "output": 0
      },
      {
        "input": {
          "nums": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
          "k": 11
        },
        "output": 5
      },
      {
        "input": {
          "nums": [1000000000, 1000000000],
          "k": 2000000000
        },
        "output": 1
      }
    ],
    "title": "Max Number of K-Sum Pairs",
    "metaData": {}
  },
  {
    "category": ["Array", "Sliding Window"],
    "difficulty": 1,
    "evalMode": "exactMatch",
    "question": "<p>You are given an integer array <code>nums</code> consisting of <code>n</code> elements, and an integer <code>k</code>.</p>\n\n<p>Find a contiguous subarray whose <strong>length is equal to</strong> <code>k</code> that has the maximum average value and return <em>this value</em>. Any answer with a calculation error less than <code>10<sup>-5</sup></code> will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,12,-5,-6,50,3], k = 4\n<strong>Output:</strong> 12.75000\n<strong>Explanation:</strong> Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5], k = 1\n<strong>Output:</strong> 5.00000\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "findMaxAverageSubarray",
    "inputParameters": {
      "cpp": ["nums", "vector<int>", "k", "int"],
      "java": ["nums", "int[]", "k", "int"],
      "javascript": ["nums", "number[]", "k", "number"],
      "python": ["nums", "List[int]", "k", "int"]
    },
    "tests": [
      {
        "input": {
          "nums": [1, 12, -5, -6, 50, 3],
          "k": 4
        },
        "output": 12.75
      },
      {
        "input": {
          "nums": [5],
          "k": 1
        },
        "output": 5.0
      },
      {
        "input": {
          "nums": [-1, -2, -3, -4, -5],
          "k": 3
        },
        "output": -2.0
      },
      {
        "input": {
          "nums": [1, 2, 3, 4, 5],
          "k": 2
        },
        "output": 4.5
      },
      {
        "input": {
          "nums": [0, 0, 0, 0, 0],
          "k": 5
        },
        "output": 0.0
      },
      {
        "input": {
          "nums": [10000, -10000, 10000, -10000],
          "k": 2
        },
        "output": 0.0
      },
      {
        "input": {
          "nums": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
          "k": 10
        },
        "output": 1.0
      },
      {
        "input": {
          "nums": [-1, 1, -1, 1, -1, 1, -1, 1],
          "k": 3
        },
        "output": 0.33333
      },
      {
        "input": {
          "nums": [9999, 9999, 9999, 9999],
          "k": 4
        },
        "output": 9999.0
      },
      {
        "input": {
          "nums": [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
          "k": 5
        },
        "output": 3.0
      }
    ],
    "title": "Maximum Average Subarray I",
    "metaData": {}
  },
  {
    "category": ["String", "Sliding Window"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>Given a string <code>s</code> and an integer <code>k</code>, return <em>the maximum number of vowel letters in any substring of </em><code>s</code><em> with length </em><code>k</code>.</p>\n\n<p><strong>Vowel letters</strong> in English are <code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, and <code>&#39;u&#39;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abciiidef&quot;, k = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The substring &quot;iii&quot; contains 3 vowel letters.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aeiou&quot;, k = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Any substring of length 2 contains 2 vowels.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;leetcode&quot;, k = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> &quot;lee&quot;, &quot;eet&quot; and &quot;ode&quot; contain 2 vowels.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n\t<li><code>1 &lt;= k &lt;= s.length</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "maxVowelsInSubstring",
    "inputParameters": {
      "cpp": ["s", "string", "k", "int"],
      "java": ["s", "String", "k", "int"],
      "javascript": ["s", "string", "k", "number"],
      "python": ["s", "str", "k", "int"]
    },
    "tests": [
      {
        "input": {
          "s": "abciiidef",
          "k": 3
        },
        "output": 3
      },
      {
        "input": {
          "s": "aeiou",
          "k": 2
        },
        "output": 2
      },
      {
        "input": {
          "s": "leetcode",
          "k": 3
        },
        "output": 2
      },
      {
        "input": {
          "s": "rhythms",
          "k": 4
        },
        "output": 0
      },
      {
        "input": {
          "s": "aaaaaa",
          "k": 2
        },
        "output": 2
      },
      {
        "input": {
          "s": "ibpbhixfiouhdljnjfflpapptrxgcomvnb",
          "k": 7
        },
        "output": 3
      },
      {
        "input": {
          "s": "qwrtypsdfghjklzxcvbnm",
          "k": 5
        },
        "output": 0
      },
      {
        "input": {
          "s": "aeioubcdfg",
          "k": 5
        },
        "output": 5
      },
      {
        "input": {
          "s": "abcdefghijklmnopqrstuvwxyz",
          "k": 26
        },
        "output": 5
      },
      {
        "input": {
          "s": "a",
          "k": 1
        },
        "output": 1
      }
    ],
    "title": "Maximum Number of Vowels in a Substring of Given Length",
    "metaData": {}
  },
  {
    "category": ["Array", "Binary Search", "Sliding Window", "Prefix Sum"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>Given a binary array <code>nums</code> and an integer <code>k</code>, return <em>the maximum number of consecutive </em><code>1</code><em>&#39;s in the array if you can flip at most</em> <code>k</code> <code>0</code>&#39;s.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> [1,1,1,0,0,<u><strong>1</strong>,1,1,1,1,<strong>1</strong></u>]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> [0,0,<u>1,1,<strong>1</strong>,<strong>1</strong>,1,1,1,<strong>1</strong>,1,1</u>,0,0,0,1,1,1,1]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>\n\t<li><code>0 &lt;= k &lt;= nums.length</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "longestConsecutiveOnesWithFlips",
    "inputParameters": {
      "cpp": ["nums", "vector<int>", "k", "int"],
      "java": ["nums", "int[]", "k", "int"],
      "javascript": ["nums", "number[]", "k", "number"],
      "python": ["nums", "List[int]", "k", "int"]
    },
    "tests": [
      {
        "input": {
          "nums": [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0],
          "k": 2
        },
        "output": 6
      },
      {
        "input": {
          "nums": [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1],
          "k": 3
        },
        "output": 10
      },
      {
        "input": {
          "nums": [1, 1, 1, 1, 1],
          "k": 0
        },
        "output": 5
      },
      {
        "input": {
          "nums": [0, 0, 0, 0],
          "k": 0
        },
        "output": 0
      },
      {
        "input": {
          "nums": [0, 0, 0, 0],
          "k": 4
        },
        "output": 4
      },
      {
        "input": {
          "nums": [1, 0, 1, 0, 1, 0, 1, 0],
          "k": 1
        },
        "output": 3
      },
      {
        "input": {
          "nums": [1, 0, 1, 0, 1, 0, 1, 0],
          "k": 2
        },
        "output": 5
      },
      {
        "input": {
          "nums": [0, 1, 0, 1, 0, 1, 0, 1],
          "k": 3
        },
        "output": 8
      },
      {
        "input": {
          "nums": [1],
          "k": 0
        },
        "output": 1
      },
      {
        "input": {
          "nums": [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0],
          "k": 3
        },
        "output": 9
      }
    ],
    "title": "Max Consecutive Ones III",
    "metaData": {}
  },
  {
    "category": ["Array", "Prefix Sum"],
    "difficulty": 1,
    "evalMode": "exactMatch",
    "question": "<p>There is a biker going on a road trip. The road trip consists of <code>n + 1</code> points at different altitudes. The biker starts his trip on point <code>0</code> with altitude equal <code>0</code>.</p>\n\n<p>You are given an integer array <code>gain</code> of length <code>n</code> where <code>gain[i]</code> is the <strong>net gain in altitude</strong> between points <code>i</code>\u200b\u200b\u200b\u200b\u200b\u200b and <code>i + 1</code> for all (<code>0 &lt;= i &lt; n)</code>. Return <em>the <strong>highest altitude</strong> of a point.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> gain = [-5,1,5,0,-7]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The altitudes are [0,-5,-4,1,1,-6]. The highest is 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> gain = [-4,-3,-2,-1,4,3,2]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == gain.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>-100 &lt;= gain[i] &lt;= 100</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "findHighestAltitude",
    "inputParameters": {
      "cpp": ["gain", "vector<int>"],
      "java": ["gain", "int[]"],
      "javascript": ["gain", "number[]"],
      "python": ["gain", "List[int]"]
    },
    "tests": [
      {
        "input": {
          "gain": [-5, 1, 5, 0, -7]
        },
        "output": 1
      },
      {
        "input": {
          "gain": [-4, -3, -2, -1, 4, 3, 2]
        },
        "output": 0
      },
      {
        "input": {
          "gain": [1, 2, 3, 4, 5]
        },
        "output": 15
      },
      {
        "input": {
          "gain": [-1, -2, -3, -4, -5]
        },
        "output": 0
      },
      {
        "input": {
          "gain": [10, -10, 10, -10]
        },
        "output": 10
      },
      {
        "input": {
          "gain": [0, 0, 0, 0, 0]
        },
        "output": 0
      },
      {
        "input": {
          "gain": [100]
        },
        "output": 100
      },
      {
        "input": {
          "gain": [-100]
        },
        "output": 0
      },
      {
        "input": {
          "gain": [1, -1, 1, -1, 1, -1]
        },
        "output": 1
      },
      {
        "input": {
          "gain": [-50, 50, -50, 50, -50, 50]
        },
        "output": 50
      }
    ],
    "title": "Find the Highest Altitude",
    "metaData": {}
  },
  {
    "category": ["Array", "Hash Table", "Matrix", "Simulation"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>Given a <strong>0-indexed</strong> <code>n x n</code> integer matrix <code>grid</code>, <em>return the number of pairs </em><code>(r<sub>i</sub>, c<sub>j</sub>)</code><em> such that row </em><code>r<sub>i</sub></code><em> and column </em><code>c<sub>j</sub></code><em> are equal</em>.</p>\n\n<p>A row and column pair is considered equal if they contain the same elements in the same order (i.e., an equal array).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/06/01/ex1.jpg\" style=\"width: 150px; height: 153px;\" />\n<pre>\n<strong>Input:</strong> grid = [[3,2,1],[1,7,6],[2,7,7]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is 1 equal row and column pair:\n- (Row 2, Column 1): [2,7,7]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/06/01/ex2.jpg\" style=\"width: 200px; height: 209px;\" />\n<pre>\n<strong>Input:</strong> grid = [[3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 3 equal row and column pairs:\n- (Row 0, Column 0): [3,1,2,2]\n- (Row 2, Column 2): [2,4,2,2]\n- (Row 3, Column 2): [2,4,2,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length == grid[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 200</code></li>\n\t<li><code>1 &lt;= grid[i][j] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "countEqualRowColumnPairs",
    "inputParameters": {
      "cpp": ["grid", "vector<vector<int>>"],
      "java": ["grid", "int[][]"],
      "javascript": ["grid", "number[][]"],
      "python": ["grid", "List[List[int]]"]
    },
    "tests": [
      {
        "input": {
          "grid": [
            [3, 2, 1],
            [1, 7, 6],
            [2, 7, 7]
          ]
        },
        "output": 1
      },
      {
        "input": {
          "grid": [
            [3, 1, 2, 2],
            [1, 4, 4, 5],
            [2, 4, 2, 2],
            [2, 4, 2, 2]
          ]
        },
        "output": 3
      },
      {
        "input": {
          "grid": [
            [1, 1],
            [1, 1]
          ]
        },
        "output": 4
      },
      {
        "input": {
          "grid": [[1]]
        },
        "output": 1
      },
      {
        "input": {
          "grid": [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]
          ]
        },
        "output": 0
      },
      {
        "input": {
          "grid": [
            [1, 2],
            [2, 1]
          ]
        },
        "output": 0
      },
      {
        "input": {
          "grid": [
            [1, 2, 3],
            [1, 2, 3],
            [1, 2, 3]
          ]
        },
        "output": 3
      },
      {
        "input": {
          "grid": [
            [1, 2, 3, 4],
            [5, 6, 7, 8],
            [9, 10, 11, 12],
            [13, 14, 15, 16]
          ]
        },
        "output": 0
      },
      {
        "input": {
          "grid": [
            [1, 1, 1],
            [1, 1, 1],
            [1, 1, 1]
          ]
        },
        "output": 9
      },
      {
        "input": {
          "grid": [
            [100000, 1],
            [1, 100000]
          ]
        },
        "output": 0
      }
    ],
    "title": "Equal Row and Column Pairs",
    "metaData": {}
  },
  {
    "category": ["String", "Stack", "Simulation"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>You are given a string <code>s</code>, which contains stars <code>*</code>.</p>\n\n<p>In one operation, you can:</p>\n\n<ul>\n\t<li>Choose a star in <code>s</code>.</li>\n\t<li>Remove the closest <strong>non-star</strong> character to its <strong>left</strong>, as well as remove the star itself.</li>\n</ul>\n\n<p>Return <em>the string after <strong>all</strong> stars have been removed</em>.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>The input will be generated such that the operation is always possible.</li>\n\t<li>It can be shown that the resulting string will always be unique.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;leet**cod*e&quot;\n<strong>Output:</strong> &quot;lecoe&quot;\n<strong>Explanation:</strong> Performing the removals from left to right:\n- The closest character to the 1<sup>st</sup> star is &#39;t&#39; in &quot;lee<strong><u>t</u></strong>**cod*e&quot;. s becomes &quot;lee*cod*e&quot;.\n- The closest character to the 2<sup>nd</sup> star is &#39;e&#39; in &quot;le<strong><u>e</u></strong>*cod*e&quot;. s becomes &quot;lecod*e&quot;.\n- The closest character to the 3<sup>rd</sup> star is &#39;d&#39; in &quot;leco<strong><u>d</u></strong>*e&quot;. s becomes &quot;lecoe&quot;.\nThere are no more stars, so we return &quot;lecoe&quot;.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;erase*****&quot;\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> The entire string is removed, so we return an empty string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters and stars <code>*</code>.</li>\n\t<li>The operation above can be performed on <code>s</code>.</li>\n</ul>\n",
    "solutions": {},
    "functionName": "removeStarsFromString",
    "inputParameters": {
      "cpp": ["s", "string"],
      "java": ["s", "String"],
      "javascript": ["s", "string"],
      "python": ["s", "str"]
    },
    "tests": [
      {
        "input": {
          "s": "leet**cod*e"
        },
        "output": "lecoe"
      },
      {
        "input": {
          "s": "erase*****"
        },
        "output": ""
      },
      {
        "input": {
          "s": "a*b*c*"
        },
        "output": ""
      },
      {
        "input": {
          "s": "abc*def*ghi"
        },
        "output": "abdefghi"
      },
      {
        "input": {
          "s": "abc**def**ghi"
        },
        "output": "aghi"
      },
      {
        "input": {
          "s": "*****"
        },
        "output": ""
      },
      {
        "input": {
          "s": "abcde"
        },
        "output": "abcde"
      },
      {
        "input": {
          "s": "a*a*a*a*"
        },
        "output": ""
      },
      {
        "input": {
          "s": "abb*ccc**d*"
        },
        "output": "abcd"
      },
      {
        "input": {
          "s": "leetcode*"
        },
        "output": "leetcod"
      }
    ],
    "title": "Removing Stars From a String",
    "metaData": {}
  },
  {
    "category": ["Array", "Stack", "Simulation"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>We are given an array <code>asteroids</code> of integers representing asteroids in a row.</p>\n\n<p>For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.</p>\n\n<p>Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [5,10,-5]\n<strong>Output:</strong> [5,10]\n<strong>Explanation:</strong> The 10 and -5 collide resulting in 10. The 5 and 10 never collide.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [8,-8]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The 8 and -8 collide exploding each other.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [10,2,-5]\n<strong>Output:</strong> [10]\n<strong>Explanation:</strong> The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= asteroids.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= asteroids[i] &lt;= 1000</code></li>\n\t<li><code>asteroids[i] != 0</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "simulateAsteroidCollisions",
    "inputParameters": {
      "cpp": ["asteroids", "vector<int>"],
      "java": ["asteroids", "int[]"],
      "javascript": ["asteroids", "number[]"],
      "python": ["asteroids", "List[int]"]
    },
    "tests": [
      {
        "input": {
          "asteroids": [5, 10, -5]
        },
        "output": [5, 10]
      },
      {
        "input": {
          "asteroids": [8, -8]
        },
        "output": []
      },
      {
        "input": {
          "asteroids": [10, 2, -5]
        },
        "output": [10]
      },
      {
        "input": {
          "asteroids": [-2, -1, 1, 2]
        },
        "output": [-2, -1, 1, 2]
      },
      {
        "input": {
          "asteroids": [1, -2, -2, -2]
        },
        "output": [-2, -2, -2]
      },
      {
        "input": {
          "asteroids": [-2, -2, 1, -2]
        },
        "output": [-2, -2, -2]
      },
      {
        "input": {
          "asteroids": [1, -1, -2, -2]
        },
        "output": [-2, -2]
      },
      {
        "input": {
          "asteroids": [1, 2, 3, -3, 4, -4, 5]
        },
        "output": [1, 2, 5]
      },
      {
        "input": {
          "asteroids": [-5, 5]
        },
        "output": [-5, 5]
      },
      {
        "input": {
          "asteroids": [1000, -1000]
        },
        "output": []
      }
    ],
    "title": "Asteroid Collision",
    "metaData": {}
  },
  {
    "category": ["String", "Greedy", "Queue"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>In the world of Dota2, there are two parties: the Radiant and the Dire.</p>\n\n<p>The Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise <strong>one</strong> of the two rights:</p>\n\n<ul>\n\t<li><strong>Ban one senator&#39;s right:</strong> A senator can make another senator lose all his rights in this and all the following rounds.</li>\n\t<li><strong>Announce the victory:</strong> If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.</li>\n</ul>\n\n<p>Given a string <code>senate</code> representing each senator&#39;s party belonging. The character <code>&#39;R&#39;</code> and <code>&#39;D&#39;</code> represent the Radiant party and the Dire party. Then if there are <code>n</code> senators, the size of the given string will be <code>n</code>.</p>\n\n<p>The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.</p>\n\n<p>Suppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be <code>&quot;Radiant&quot;</code> or <code>&quot;Dire&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> senate = &quot;RD&quot;\n<strong>Output:</strong> &quot;Radiant&quot;\n<strong>Explanation:</strong> \nThe first senator comes from Radiant and he can just ban the next senator&#39;s right in round 1. \nAnd the second senator can&#39;t exercise any rights anymore since his right has been banned. \nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> senate = &quot;RDD&quot;\n<strong>Output:</strong> &quot;Dire&quot;\n<strong>Explanation:</strong> \nThe first senator comes from Radiant and he can just ban the next senator&#39;s right in round 1. \nAnd the second senator can&#39;t exercise any rights anymore since his right has been banned. \nAnd the third senator comes from Dire and he can ban the first senator&#39;s right in round 1. \nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == senate.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>senate[i]</code> is either <code>&#39;R&#39;</code> or <code>&#39;D&#39;</code>.</li>\n</ul>\n",
    "solutions": {},
    "functionName": "predictPartyVictory",
    "inputParameters": {
      "cpp": ["senate", "string"],
      "java": ["senate", "String"],
      "javascript": ["senate", "string"],
      "python": ["senate", "str"]
    },
    "tests": [
      {
        "input": {
          "senate": "RD"
        },
        "output": "Radiant"
      },
      {
        "input": {
          "senate": "RDD"
        },
        "output": "Dire"
      },
      {
        "input": {
          "senate": "DDRRR"
        },
        "output": "Radiant"
      },
      {
        "input": {
          "senate": "DRRDRDRDRDDR"
        },
        "output": "Dire"
      },
      {
        "input": {
          "senate": "RRRDDDD"
        },
        "output": "Radiant"
      },
      {
        "input": {
          "senate": "DDDDDDRRRRRR"
        },
        "output": "Dire"
      },
      {
        "input": {
          "senate": "R"
        },
        "output": "Radiant"
      },
      {
        "input": {
          "senate": "D"
        },
        "output": "Dire"
      },
      {
        "input": {
          "senate": "RDRDRDRDRDRDRDRDRD"
        },
        "output": "Radiant"
      },
      {
        "input": {
          "senate": "DRDRDRDRDRDRDRDRDRD"
        },
        "output": "Dire"
      }
    ],
    "title": "Dota2 Senate",
    "metaData": {}
  },
  {
    "category": ["Linked List", "Two Pointers"],
    "difficulty": 2,
    "evalMode": "listNodeIter",
    "question": "<p>You are given the <code>head</code> of a linked list. <strong>Delete</strong> the <strong>middle node</strong>, and return <em>the</em> <code>head</code> <em>of the modified linked list</em>.</p>\n\n<p>The <strong>middle node</strong> of a linked list of size <code>n</code> is the <code>&lfloor;n / 2&rfloor;<sup>th</sup></code> node from the <b>start</b> using <strong>0-based indexing</strong>, where <code>&lfloor;x&rfloor;</code> denotes the largest integer less than or equal to <code>x</code>.</p>\n\n<ul>\n\t<li>For <code>n</code> = <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, and <code>5</code>, the middle nodes are <code>0</code>, <code>1</code>, <code>1</code>, <code>2</code>, and <code>2</code>, respectively.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/16/eg1drawio.png\" style=\"width: 500px; height: 77px;\" />\n<pre>\n<strong>Input:</strong> head = [1,3,4,7,1,2,6]\n<strong>Output:</strong> [1,3,4,1,2,6]\n<strong>Explanation:</strong>\nThe above figure represents the given linked list. The indices of the nodes are written below.\nSince n = 7, node 3 with value 7 is the middle node, which is marked in red.\nWe return the new list after removing this node. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/16/eg2drawio.png\" style=\"width: 250px; height: 43px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4]\n<strong>Output:</strong> [1,2,4]\n<strong>Explanation:</strong>\nThe above figure represents the given linked list.\nFor n = 4, node 2 with value 3 is the middle node, which is marked in red.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/16/eg3drawio.png\" style=\"width: 150px; height: 58px;\" />\n<pre>\n<strong>Input:</strong> head = [2,1]\n<strong>Output:</strong> [2]\n<strong>Explanation:</strong>\nThe above figure represents the given linked list.\nFor n = 2, node 1 with value 1 is the middle node, which is marked in red.\nNode 0 with value 2 is the only node remaining after removing node 1.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[1, 10<sup>5</sup>]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "deleteMiddleNode",
    "inputParameters": {
      "cpp": ["head", "ListNode*"],
      "java": ["head", "ListNode"],
      "javascript": ["head", "ListNode"],
      "python": ["head", "Optional[ListNode]"]
    },
    "tests": [
      {
        "input": {
          "head": [1, 3, 4, 7, 1, 2, 6]
        },
        "output": [1, 3, 4, 1, 2, 6]
      },
      {
        "input": {
          "head": [1, 2, 3, 4]
        },
        "output": [1, 2, 4]
      },
      {
        "input": {
          "head": [2, 1]
        },
        "output": [2]
      },
      {
        "input": {
          "head": [1]
        },
        "output": []
      },
      {
        "input": {
          "head": [1, 2, 3, 4, 5]
        },
        "output": [1, 2, 4, 5]
      },
      {
        "input": {
          "head": [1, 2, 3, 4, 5, 6]
        },
        "output": [1, 2, 3, 5, 6]
      },
      {
        "input": {
          "head": [1, 2, 3]
        },
        "output": [1, 3]
      },
      {
        "input": {
          "head": [1, 2]
        },
        "output": [1]
      },
      {
        "input": {
          "head": [1, 2, 3, 4, 5, 6, 7, 8, 9]
        },
        "output": [1, 2, 3, 4, 6, 7, 8, 9]
      },
      {
        "input": {
          "head": [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
        },
        "output": [10, 20, 30, 40, 60, 70, 80, 90, 100]
      }
    ],
    "title": "Delete the Middle Node of a Linked List",
    "metaData": {}
  },
  {
    "category": ["Linked List"],
    "difficulty": 2,
    "evalMode": "listNodeIter",
    "question": "<p>Given the <code>head</code> of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return <em>the reordered list</em>.</p>\n\n<p>The <strong>first</strong> node is considered <strong>odd</strong>, and the <strong>second</strong> node is <strong>even</strong>, and so on.</p>\n\n<p>Note that the relative order inside both the even and odd groups should remain as it was in the input.</p>\n\n<p>You must solve the problem&nbsp;in <code>O(1)</code>&nbsp;extra space complexity and <code>O(n)</code> time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/10/oddeven-linked-list.jpg\" style=\"width: 300px; height: 123px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5]\n<strong>Output:</strong> [1,3,5,2,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/10/oddeven2-linked-list.jpg\" style=\"width: 500px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> head = [2,1,3,5,6,4,7]\n<strong>Output:</strong> [2,3,6,7,1,5,4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the linked list is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>6</sup> &lt;= Node.val &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "reorderOddEvenLinkedList",
    "inputParameters": {
      "cpp": ["head", "ListNode*"],
      "java": ["head", "ListNode"],
      "javascript": ["head", "ListNode"],
      "python": ["head", "Optional[ListNode]"]
    },
    "tests": [
      {
        "input": {
          "head": [1, 2, 3, 4, 5]
        },
        "output": [1, 3, 5, 2, 4]
      },
      {
        "input": {
          "head": [2, 1, 3, 5, 6, 4, 7]
        },
        "output": [2, 3, 6, 7, 1, 5, 4]
      },
      {
        "input": {
          "head": [1]
        },
        "output": [1]
      },
      {
        "input": {
          "head": []
        },
        "output": []
      },
      {
        "input": {
          "head": [1, 2]
        },
        "output": [1, 2]
      },
      {
        "input": {
          "head": [1, 2, 3]
        },
        "output": [1, 3, 2]
      },
      {
        "input": {
          "head": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        },
        "output": [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]
      },
      {
        "input": {
          "head": [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
        },
        "output": [10, 8, 6, 4, 2, 9, 7, 5, 3, 1]
      },
      {
        "input": {
          "head": [1, 1, 1, 1, 1]
        },
        "output": [1, 1, 1, 1, 1]
      },
      {
        "input": {
          "head": [1, 2, 3, 4, 5, 6, 7, 8, 9]
        },
        "output": [1, 3, 5, 7, 9, 2, 4, 6, 8]
      }
    ],
    "title": "Odd Even Linked List",
    "metaData": {}
  },
  {
    "category": ["Linked List", "Recursion"],
    "difficulty": 1,
    "evalMode": "listNodeIter",
    "question": "<p>Given the <code>head</code> of a singly linked list, reverse the list, and return <em>the reversed list</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5]\n<strong>Output:</strong> [5,4,3,2,1]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg\" style=\"width: 182px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2]\n<strong>Output:</strong> [2,1]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is the range <code>[0, 5000]</code>.</li>\n\t<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> A linked list can be reversed either iteratively or recursively. Could you implement both?</p>\n",
    "solutions": {},
    "functionName": "reverseLinkedList",
    "inputParameters": {
      "cpp": ["head", "ListNode*"],
      "java": ["head", "ListNode"],
      "javascript": ["head", "ListNode"],
      "python": ["head", "Optional[ListNode]"]
    },
    "tests": [
      {
        "input": {
          "head": [1, 2, 3, 4, 5]
        },
        "output": [5, 4, 3, 2, 1]
      },
      {
        "input": {
          "head": [1, 2]
        },
        "output": [2, 1]
      },
      {
        "input": {
          "head": []
        },
        "output": []
      },
      {
        "input": {
          "head": [1]
        },
        "output": [1]
      },
      {
        "input": {
          "head": [1, 1, 1, 1, 1]
        },
        "output": [1, 1, 1, 1, 1]
      },
      {
        "input": {
          "head": [-1, -2, -3, -4, -5]
        },
        "output": [-5, -4, -3, -2, -1]
      },
      {
        "input": {
          "head": [1, 2, 3, 4, 5, 4, 3, 2, 1]
        },
        "output": [1, 2, 3, 4, 5, 4, 3, 2, 1]
      },
      {
        "input": {
          "head": [0]
        },
        "output": [0]
      },
      {
        "input": {
          "head": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        },
        "output": [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
      },
      {
        "input": {
          "head": [-5000, 0, 5000]
        },
        "output": [5000, 0, -5000]
      }
    ],
    "title": "Reverse Linked List",
    "metaData": {}
  },
  {
    "category": ["Linked List", "Two Pointers", "Stack"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>In a linked list of size <code>n</code>, where <code>n</code> is <strong>even</strong>, the <code>i<sup>th</sup></code> node (<strong>0-indexed</strong>) of the linked list is known as the <strong>twin</strong> of the <code>(n-1-i)<sup>th</sup></code> node, if <code>0 &lt;= i &lt;= (n / 2) - 1</code>.</p>\n\n<ul>\n\t<li>For example, if <code>n = 4</code>, then node <code>0</code> is the twin of node <code>3</code>, and node <code>1</code> is the twin of node <code>2</code>. These are the only nodes with twins for <code>n = 4</code>.</li>\n</ul>\n\n<p>The <strong>twin sum </strong>is defined as the sum of a node and its twin.</p>\n\n<p>Given the <code>head</code> of a linked list with even length, return <em>the <strong>maximum twin sum</strong> of the linked list</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/03/eg1drawio.png\" style=\"width: 250px; height: 70px;\" />\n<pre>\n<strong>Input:</strong> head = [5,4,2,1]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong>\nNodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.\nThere are no other nodes with twins in the linked list.\nThus, the maximum twin sum of the linked list is 6. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/03/eg2drawio.png\" style=\"width: 250px; height: 70px;\" />\n<pre>\n<strong>Input:</strong> head = [4,2,2,3]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong>\nThe nodes with twins present in this linked list are:\n- Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.\n- Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.\nThus, the maximum twin sum of the linked list is max(7, 4) = 7. \n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/03/eg3drawio.png\" style=\"width: 200px; height: 88px;\" />\n<pre>\n<strong>Input:</strong> head = [1,100000]\n<strong>Output:</strong> 100001\n<strong>Explanation:</strong>\nThere is only one node with a twin in the linked list having twin sum of 1 + 100000 = 100001.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is an <strong>even</strong> integer in the range <code>[2, 10<sup>5</sup>]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "findMaxTwinSum",
    "inputParameters": {
      "cpp": ["head", "ListNode*"],
      "java": ["head", "ListNode"],
      "javascript": ["head", "ListNode"],
      "python": ["head", "Optional[ListNode]"]
    },
    "tests": [
      {
        "input": {
          "head": [5, 4, 2, 1]
        },
        "output": 6
      },
      {
        "input": {
          "head": [4, 2, 2, 3]
        },
        "output": 7
      },
      {
        "input": {
          "head": [1, 100000]
        },
        "output": 100001
      },
      {
        "input": {
          "head": [1, 2, 3, 4, 5, 6]
        },
        "output": 7
      },
      {
        "input": {
          "head": [10, 9, 8, 7, 6, 5]
        },
        "output": 15
      },
      {
        "input": {
          "head": [1, 1, 1, 1]
        },
        "output": 2
      },
      {
        "input": {
          "head": [100, 1, 100, 1]
        },
        "output": 101
      },
      {
        "input": {
          "head": [5, 5, 5, 5, 5, 5]
        },
        "output": 10
      },
      {
        "input": {
          "head": [1, 2, 3, 4, 5, 6, 7, 8]
        },
        "output": 9
      },
      {
        "input": {
          "head": [99999, 1, 2, 3, 4, 100000]
        },
        "output": 199999
      }
    ],
    "title": "Maximum Twin Sum of a Linked List",
    "metaData": {}
  },
  {
    "category": ["Depth-First Search", "Breadth-First Search", "Graph"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>There are <code>n</code> rooms labeled from <code>0</code> to <code>n - 1</code>&nbsp;and all the rooms are locked except for room <code>0</code>. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.</p>\n\n<p>When you visit a room, you may find a set of <strong>distinct keys</strong> in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.</p>\n\n<p>Given an array <code>rooms</code> where <code>rooms[i]</code> is the set of keys that you can obtain if you visited room <code>i</code>, return <code>true</code> <em>if you can visit <strong>all</strong> the rooms, or</em> <code>false</code> <em>otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> rooms = [[1],[2],[3],[]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \nWe visit room 0 and pick up key 1.\nWe then visit room 1 and pick up key 2.\nWe then visit room 2 and pick up key 3.\nWe then visit room 3.\nSince we were able to visit every room, we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> rooms = [[1,3],[3,0,1],[2],[0]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> We can not enter room number 2 since the only key that unlocks it is in that room.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == rooms.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>0 &lt;= rooms[i].length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= sum(rooms[i].length) &lt;= 3000</code></li>\n\t<li><code>0 &lt;= rooms[i][j] &lt; n</code></li>\n\t<li>All the values of <code>rooms[i]</code> are <strong>unique</strong>.</li>\n</ul>\n",
    "solutions": {},
    "functionName": "canVisitAllRooms",
    "inputParameters": {
      "cpp": ["rooms", "vector<vector<int>>"],
      "java": ["rooms", "List<List<Integer>>"],
      "javascript": ["rooms", "number[][]"],
      "python": ["rooms", "List[List[int]]"]
    },
    "tests": [
      {
        "input": {
          "rooms": [[1], [2], [3], []]
        },
        "output": true
      },
      {
        "input": {
          "rooms": [[1, 3], [3, 0, 1], [2], [0]]
        },
        "output": false
      },
      {
        "input": {
          "rooms": [[1, 2, 3], [], [], []]
        },
        "output": true
      },
      {
        "input": {
          "rooms": [[1], [2], [3], [4], []]
        },
        "output": true
      },
      {
        "input": {
          "rooms": [[], []]
        },
        "output": false
      },
      {
        "input": {
          "rooms": [[1], []]
        },
        "output": true
      },
      {
        "input": {
          "rooms": [[2], [], [1]]
        },
        "output": false
      },
      {
        "input": {
          "rooms": [[1, 2, 3], [2, 3], [3, 1], []]
        },
        "output": true
      },
      {
        "input": {
          "rooms": [[1], [2], [0]]
        },
        "output": true
      },
      {
        "input": {
          "rooms": [[], [2, 3], [1, 3], [1, 2]]
        },
        "output": false
      }
    ],
    "title": "Keys and Rooms",
    "metaData": {}
  },
  {
    "category": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>There are <code>n</code> cities. Some of them are connected, while some are not. If city <code>a</code> is connected directly with city <code>b</code>, and city <code>b</code> is connected directly with city <code>c</code>, then city <code>a</code> is connected indirectly with city <code>c</code>.</p>\n\n<p>A <strong>province</strong> is a group of directly or indirectly connected cities and no other cities outside of the group.</p>\n\n<p>You are given an <code>n x n</code> matrix <code>isConnected</code> where <code>isConnected[i][j] = 1</code> if the <code>i<sup>th</sup></code> city and the <code>j<sup>th</sup></code> city are directly connected, and <code>isConnected[i][j] = 0</code> otherwise.</p>\n\n<p>Return <em>the total number of <strong>provinces</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/24/graph1.jpg\" style=\"width: 222px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> isConnected = [[1,1,0],[1,1,0],[0,0,1]]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/24/graph2.jpg\" style=\"width: 222px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> isConnected = [[1,0,0],[0,1,0],[0,0,1]]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 200</code></li>\n\t<li><code>n == isConnected.length</code></li>\n\t<li><code>n == isConnected[i].length</code></li>\n\t<li><code>isConnected[i][j]</code> is <code>1</code> or <code>0</code>.</li>\n\t<li><code>isConnected[i][i] == 1</code></li>\n\t<li><code>isConnected[i][j] == isConnected[j][i]</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "countProvinces",
    "inputParameters": {
      "cpp": ["isConnected", "vector<vector<int>>"],
      "java": ["isConnected", "int[][]"],
      "javascript": ["isConnected", "number[][]"],
      "python": ["isConnected", "List[List[int]]"]
    },
    "tests": [
      {
        "input": {
          "isConnected": [
            [1, 1, 0],
            [1, 1, 0],
            [0, 0, 1]
          ]
        },
        "output": 2
      },
      {
        "input": {
          "isConnected": [
            [1, 0, 0],
            [0, 1, 0],
            [0, 0, 1]
          ]
        },
        "output": 3
      },
      {
        "input": {
          "isConnected": [
            [1, 1, 1],
            [1, 1, 1],
            [1, 1, 1]
          ]
        },
        "output": 1
      },
      {
        "input": {
          "isConnected": [[1]]
        },
        "output": 1
      },
      {
        "input": {
          "isConnected": [
            [1, 0],
            [0, 1]
          ]
        },
        "output": 2
      },
      {
        "input": {
          "isConnected": [
            [1, 1, 0, 0],
            [1, 1, 0, 0],
            [0, 0, 1, 1],
            [0, 0, 1, 1]
          ]
        },
        "output": 2
      },
      {
        "input": {
          "isConnected": [
            [1, 0, 0, 1],
            [0, 1, 1, 0],
            [0, 1, 1, 1],
            [1, 0, 1, 1]
          ]
        },
        "output": 1
      },
      {
        "input": {
          "isConnected": [
            [1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0],
            [0, 0, 1, 0, 0],
            [0, 0, 0, 1, 0],
            [0, 0, 0, 0, 1]
          ]
        },
        "output": 5
      },
      {
        "input": {
          "isConnected": [
            [1, 1, 1, 0, 0],
            [1, 1, 1, 0, 0],
            [1, 1, 1, 0, 0],
            [0, 0, 0, 1, 1],
            [0, 0, 0, 1, 1]
          ]
        },
        "output": 2
      },
      {
        "input": {
          "isConnected": [
            [1, 0, 1, 0],
            [0, 1, 0, 1],
            [1, 0, 1, 0],
            [0, 1, 0, 1]
          ]
        },
        "output": 2
      }
    ],
    "title": "Number of Provinces",
    "metaData": {}
  },
  {
    "category": ["Depth-First Search", "Breadth-First Search", "Graph"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>There are <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code> and <code>n - 1</code> roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.</p>\n\n<p>Roads are represented by <code>connections</code> where <code>connections[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> represents a road from city <code>a<sub>i</sub></code> to city <code>b<sub>i</sub></code>.</p>\n\n<p>This year, there will be a big event in the capital (city <code>0</code>), and many people want to travel to this city.</p>\n\n<p>Your task consists of reorienting some roads such that each city can visit the city <code>0</code>. Return the <strong>minimum</strong> number of edges changed.</p>\n\n<p>It&#39;s <strong>guaranteed</strong> that each city can reach city <code>0</code> after reorder.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/05/13/sample_1_1819.png\" style=\"width: 311px; height: 189px;\" />\n<pre>\n<strong>Input:</strong> n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>Change the direction of edges show in red such that each node can reach the node 0 (capital).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/05/13/sample_2_1819.png\" style=\"width: 509px; height: 79px;\" />\n<pre>\n<strong>Input:</strong> n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>Change the direction of edges show in red such that each node can reach the node 0 (capital).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, connections = [[1,0],[2,0]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>connections.length == n - 1</code></li>\n\t<li><code>connections[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "minReorderToReachCapital",
    "inputParameters": {
      "cpp": ["n", "int", "connections", "vector<vector<int>>"],
      "java": ["n", "int", "connections", "int[][]"],
      "javascript": ["n", "number", "connections", "number[][]"],
      "python": ["n", "int", "connections", "List[List[int]]"]
    },
    "tests": [
      {
        "input": {
          "n": 6,
          "connections": [
            [0, 1],
            [1, 3],
            [2, 3],
            [4, 0],
            [4, 5]
          ]
        },
        "output": 3
      },
      {
        "input": {
          "n": 5,
          "connections": [
            [1, 0],
            [1, 2],
            [3, 2],
            [3, 4]
          ]
        },
        "output": 2
      },
      {
        "input": {
          "n": 3,
          "connections": [
            [1, 0],
            [2, 0]
          ]
        },
        "output": 0
      },
      {
        "input": {
          "n": 4,
          "connections": [
            [0, 1],
            [1, 2],
            [2, 3]
          ]
        },
        "output": 0
      },
      {
        "input": {
          "n": 7,
          "connections": [
            [0, 1],
            [1, 2],
            [2, 3],
            [3, 4],
            [4, 5],
            [5, 6]
          ]
        },
        "output": 0
      },
      {
        "input": {
          "n": 8,
          "connections": [
            [1, 0],
            [2, 1],
            [3, 2],
            [4, 3],
            [5, 4],
            [6, 5],
            [7, 6]
          ]
        },
        "output": 7
      },
      {
        "input": {
          "n": 10,
          "connections": [
            [0, 1],
            [1, 2],
            [2, 3],
            [3, 4],
            [4, 5],
            [5, 6],
            [6, 7],
            [7, 8],
            [8, 9]
          ]
        },
        "output": 0
      },
      {
        "input": {
          "n": 9,
          "connections": [
            [0, 1],
            [1, 2],
            [2, 3],
            [3, 4],
            [4, 5],
            [5, 6],
            [6, 7],
            [7, 8]
          ]
        },
        "output": 0
      },
      {
        "input": {
          "n": 5,
          "connections": [
            [1, 0],
            [2, 1],
            [3, 1],
            [4, 3]
          ]
        },
        "output": 2
      },
      {
        "input": {
          "n": 7,
          "connections": [
            [0, 1],
            [0, 2],
            [1, 3],
            [1, 4],
            [2, 5],
            [2, 6]
          ]
        },
        "output": 0
      }
    ],
    "title": "Reorder Routes to Make All Paths Lead to the City Zero",
    "metaData": {}
  },
  {
    "category": [
      "Array",
      "String",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph",
      "Shortest Path"
    ],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>You are given an array of variable pairs <code>equations</code> and an array of real numbers <code>values</code>, where <code>equations[i] = [A<sub>i</sub>, B<sub>i</sub>]</code> and <code>values[i]</code> represent the equation <code>A<sub>i</sub> / B<sub>i</sub> = values[i]</code>. Each <code>A<sub>i</sub></code> or <code>B<sub>i</sub></code> is a string that represents a single variable.</p>\n\n<p>You are also given some <code>queries</code>, where <code>queries[j] = [C<sub>j</sub>, D<sub>j</sub>]</code> represents the <code>j<sup>th</sup></code> query where you must find the answer for <code>C<sub>j</sub> / D<sub>j</sub> = ?</code>.</p>\n\n<p>Return <em>the answers to all queries</em>. If a single answer cannot be determined, return <code>-1.0</code>.</p>\n\n<p><strong>Note:</strong> The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.</p>\n\n<p><strong>Note:&nbsp;</strong>The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> equations = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;c&quot;]], values = [2.0,3.0], queries = [[&quot;a&quot;,&quot;c&quot;],[&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;e&quot;],[&quot;a&quot;,&quot;a&quot;],[&quot;x&quot;,&quot;x&quot;]]\n<strong>Output:</strong> [6.00000,0.50000,-1.00000,1.00000,-1.00000]\n<strong>Explanation:</strong> \nGiven: <em>a / b = 2.0</em>, <em>b / c = 3.0</em>\nqueries are: <em>a / c = ?</em>, <em>b / a = ?</em>, <em>a / e = ?</em>, <em>a / a = ?</em>, <em>x / x = ? </em>\nreturn: [6.0, 0.5, -1.0, 1.0, -1.0 ]\nnote: x is undefined =&gt; -1.0</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> equations = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;c&quot;],[&quot;bc&quot;,&quot;cd&quot;]], values = [1.5,2.5,5.0], queries = [[&quot;a&quot;,&quot;c&quot;],[&quot;c&quot;,&quot;b&quot;],[&quot;bc&quot;,&quot;cd&quot;],[&quot;cd&quot;,&quot;bc&quot;]]\n<strong>Output:</strong> [3.75000,0.40000,5.00000,0.20000]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> equations = [[&quot;a&quot;,&quot;b&quot;]], values = [0.5], queries = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;c&quot;],[&quot;x&quot;,&quot;y&quot;]]\n<strong>Output:</strong> [0.50000,2.00000,-1.00000,-1.00000]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= equations.length &lt;= 20</code></li>\n\t<li><code>equations[i].length == 2</code></li>\n\t<li><code>1 &lt;= A<sub>i</sub>.length, B<sub>i</sub>.length &lt;= 5</code></li>\n\t<li><code>values.length == equations.length</code></li>\n\t<li><code>0.0 &lt; values[i] &lt;= 20.0</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 20</code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>1 &lt;= C<sub>j</sub>.length, D<sub>j</sub>.length &lt;= 5</code></li>\n\t<li><code>A<sub>i</sub>, B<sub>i</sub>, C<sub>j</sub>, D<sub>j</sub></code> consist of lower case English letters and digits.</li>\n</ul>\n",
    "solutions": {},
    "functionName": "calculateVariableRatios",
    "inputParameters": {
      "cpp": [
        "equations",
        "vector<vector<string>>",
        "values",
        "vector<double>",
        "queries",
        "vector<vector<string>>"
      ],
      "java": [
        "equations",
        "List<List<String>>",
        "values",
        "double[]",
        "queries",
        "List<List<String>>"
      ],
      "javascript": ["equations", "string[][]", "values", "number[]", "queries", "string[][]"],
      "python": [
        "equations",
        "List[List[str]]",
        "values",
        "List[float]",
        "queries",
        "List[List[str]]"
      ]
    },
    "tests": [
      {
        "input": {
          "equations": [
            ["a", "b"],
            ["b", "c"]
          ],
          "values": [2.0, 3.0],
          "queries": [
            ["a", "c"],
            ["b", "a"],
            ["a", "e"],
            ["a", "a"],
            ["x", "x"]
          ]
        },
        "output": [6.0, 0.5, -1.0, 1.0, -1.0]
      },
      {
        "input": {
          "equations": [
            ["a", "b"],
            ["b", "c"],
            ["bc", "cd"]
          ],
          "values": [1.5, 2.5, 5.0],
          "queries": [
            ["a", "c"],
            ["c", "b"],
            ["bc", "cd"],
            ["cd", "bc"]
          ]
        },
        "output": [3.75, 0.4, 5.0, 0.2]
      },
      {
        "input": {
          "equations": [["a", "b"]],
          "values": [0.5],
          "queries": [
            ["a", "b"],
            ["b", "a"],
            ["a", "c"],
            ["x", "y"]
          ]
        },
        "output": [0.5, 2.0, -1.0, -1.0]
      },
      {
        "input": {
          "equations": [
            ["x", "y"],
            ["y", "z"]
          ],
          "values": [2.0, 3.0],
          "queries": [
            ["x", "z"],
            ["z", "x"],
            ["y", "y"],
            ["z", "z"],
            ["x", "w"]
          ]
        },
        "output": [6.0, 0.16667, 1.0, 1.0, -1.0]
      },
      {
        "input": {
          "equations": [
            ["a", "b"],
            ["c", "d"]
          ],
          "values": [1.0, 1.0],
          "queries": [
            ["a", "c"],
            ["b", "d"],
            ["b", "a"],
            ["d", "c"]
          ]
        },
        "output": [-1.0, -1.0, 1.0, 1.0]
      },
      {
        "input": {
          "equations": [
            ["a", "b"],
            ["b", "c"],
            ["c", "d"],
            ["d", "e"]
          ],
          "values": [2.0, 3.0, 4.0, 5.0],
          "queries": [
            ["a", "e"],
            ["e", "a"],
            ["b", "e"],
            ["a", "a"]
          ]
        },
        "output": [120.0, 0.00833, 60.0, 1.0]
      },
      {
        "input": {
          "equations": [
            ["x1", "x2"],
            ["x2", "x3"],
            ["x3", "x4"],
            ["x4", "x5"]
          ],
          "values": [3.0, 4.0, 5.0, 6.0],
          "queries": [
            ["x1", "x5"],
            ["x5", "x2"],
            ["x2", "x4"]
          ]
        },
        "output": [360.0, 0.00833, 20.0]
      },
      {
        "input": {
          "equations": [
            ["a", "b"],
            ["b", "c"]
          ],
          "values": [2.0, 3.0],
          "queries": [
            ["a", "c"],
            ["c", "a"],
            ["b", "b"],
            ["c", "c"]
          ]
        },
        "output": [6.0, 0.16667, 1.0, 1.0]
      },
      {
        "input": {
          "equations": [["x", "y"]],
          "values": [2.0],
          "queries": [
            ["x", "y"],
            ["y", "x"],
            ["y", "y"],
            ["x", "x"],
            ["z", "x"]
          ]
        },
        "output": [2.0, 0.5, 1.0, 1.0, -1.0]
      },
      {
        "input": {
          "equations": [
            ["a", "b"],
            ["b", "c"],
            ["a", "c"]
          ],
          "values": [2.0, 3.0, 6.0],
          "queries": [
            ["a", "c"],
            ["b", "a"],
            ["a", "e"],
            ["a", "a"],
            ["x", "x"]
          ]
        },
        "output": [6.0, 0.5, -1.0, 1.0, -1.0]
      }
    ],
    "title": "Evaluate Division",
    "metaData": {}
  },
  {
    "category": ["Array", "Breadth-First Search", "Matrix"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>You are given an <code>m x n</code> matrix <code>maze</code> (<strong>0-indexed</strong>) with empty cells (represented as <code>&#39;.&#39;</code>) and walls (represented as <code>&#39;+&#39;</code>). You are also given the <code>entrance</code> of the maze, where <code>entrance = [entrance<sub>row</sub>, entrance<sub>col</sub>]</code> denotes the row and column of the cell you are initially standing at.</p>\n\n<p>In one step, you can move one cell <strong>up</strong>, <strong>down</strong>, <strong>left</strong>, or <strong>right</strong>. You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the <strong>nearest exit</strong> from the <code>entrance</code>. An <strong>exit</strong> is defined as an <strong>empty cell</strong> that is at the <strong>border</strong> of the <code>maze</code>. The <code>entrance</code> <strong>does not count</strong> as an exit.</p>\n\n<p>Return <em>the <strong>number of steps</strong> in the shortest path from the </em><code>entrance</code><em> to the nearest exit, or </em><code>-1</code><em> if no such path exists</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/04/nearest1-grid.jpg\" style=\"width: 333px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> maze = [[&quot;+&quot;,&quot;+&quot;,&quot;.&quot;,&quot;+&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;+&quot;],[&quot;+&quot;,&quot;+&quot;,&quot;+&quot;,&quot;.&quot;]], entrance = [1,2]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There are 3 exits in this maze at [1,0], [0,2], and [2,3].\nInitially, you are at the entrance cell [1,2].\n- You can reach [1,0] by moving 2 steps left.\n- You can reach [0,2] by moving 1 step up.\nIt is impossible to reach [2,3] from the entrance.\nThus, the nearest exit is [0,2], which is 1 step away.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/04/nearesr2-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> maze = [[&quot;+&quot;,&quot;+&quot;,&quot;+&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;+&quot;,&quot;+&quot;,&quot;+&quot;]], entrance = [1,0]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There is 1 exit in this maze at [1,2].\n[1,0] does not count as an exit since it is the entrance cell.\nInitially, you are at the entrance cell [1,0].\n- You can reach [1,2] by moving 2 steps right.\nThus, the nearest exit is [1,2], which is 2 steps away.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/04/nearest3-grid.jpg\" style=\"width: 173px; height: 93px;\" />\n<pre>\n<strong>Input:</strong> maze = [[&quot;.&quot;,&quot;+&quot;]], entrance = [0,0]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There are no exits in this maze.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>maze.length == m</code></li>\n\t<li><code>maze[i].length == n</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>maze[i][j]</code> is either <code>&#39;.&#39;</code> or <code>&#39;+&#39;</code>.</li>\n\t<li><code>entrance.length == 2</code></li>\n\t<li><code>0 &lt;= entrance<sub>row</sub> &lt; m</code></li>\n\t<li><code>0 &lt;= entrance<sub>col</sub> &lt; n</code></li>\n\t<li><code>entrance</code> will always be an empty cell.</li>\n</ul>\n",
    "solutions": {},
    "functionName": "findNearestMazeExit",
    "inputParameters": {
      "cpp": ["maze", "vector<vector<char>>", "entrance", "vector<int>"],
      "java": ["maze", "char[][]", "entrance", "int[]"],
      "javascript": ["maze", "character[][]", "entrance", "number[]"],
      "python": ["maze", "List[List[str]]", "entrance", "List[int]"]
    },
    "tests": [
      {
        "input": {
          "maze": [
            ["+", "+", ".", "+"],
            [".", ".", ".", "+"],
            ["+", "+", "+", "."]
          ],
          "entrance": [1, 2]
        },
        "output": 1
      },
      {
        "input": {
          "maze": [
            ["+", "+", "+"],
            [".", ".", "."],
            ["+", " +", "+"]
          ],
          "entrance": [1, 0]
        },
        "output": 2
      },
      {
        "input": {
          "maze": [[".", "+"]],
          "entrance": [0, 0]
        },
        "output": -1
      },
      {
        "input": {
          "maze": [
            [".", ".", ".", "."],
            ["+", "+", "+", "."],
            [".", ".", ".", "."]
          ],
          "entrance": [0, 0]
        },
        "output": 1
      },
      {
        "input": {
          "maze": [
            ["+", "+", "+", "+", "+"],
            [".", ".", ".", ".", "+"],
            ["+", "+", "+", ".", "+"]
          ],
          "entrance": [1, 2]
        },
        "output": 3
      },
      {
        "input": {
          "maze": [["."]],
          "entrance": [0, 0]
        },
        "output": 0
      },
      {
        "input": {
          "maze": [
            ["+", "+", "+"],
            [".", ".", "."],
            ["+", "+", "+"]
          ],
          "entrance": [1, 1]
        },
        "output": 1
      },
      {
        "input": {
          "maze": [
            ["+", ".", "+", "+", "+", "+", "+"],
            [".", ".", ".", ".", ".", ".", "+"],
            ["+", ".", ".", "+", "+", ".", "+"],
            ["+", "+", "+", "+", "+", ".", "+"],
            ["+", ".", ".", ".", ".", ".", "+"]
          ],
          "entrance": [0, 1]
        },
        "output": 7
      },
      {
        "input": {
          "maze": [
            ["+", "+", "+", "+", "+", "+"],
            [".", ".", ".", ".", ".", "+"],
            [".", "+", "+", "+", ".", "+"],
            [".", "+", ".", ".", ".", "+"],
            [".", "+", "+", "+", ".", "+"],
            [".", ".", ".", ".", ".", "+"]
          ],
          "entrance": [1, 0]
        },
        "output": 10
      },
      {
        "input": {
          "maze": [
            ["+", "+", "+", "+", "+"],
            [".", ".", ".", ".", "."],
            ["+", "+", "+", "+", "+"]
          ],
          "entrance": [1, 2]
        },
        "output": 2
      }
    ],
    "title": "Nearest Exit from Entrance in Maze",
    "metaData": {}
  },
  {
    "category": ["Array", "Breadth-First Search", "Matrix"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>You are given an <code>m x n</code> <code>grid</code> where each cell can have one of three values:</p>\n\n<ul>\n\t<li><code>0</code> representing an empty cell,</li>\n\t<li><code>1</code> representing a fresh orange, or</li>\n\t<li><code>2</code> representing a rotten orange.</li>\n</ul>\n\n<p>Every minute, any fresh orange that is <strong>4-directionally adjacent</strong> to a rotten orange becomes rotten.</p>\n\n<p>Return <em>the minimum number of minutes that must elapse until no cell has a fresh orange</em>. If <em>this is impossible, return</em> <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/16/oranges.png\" style=\"width: 650px; height: 137px;\" />\n<pre>\n<strong>Input:</strong> grid = [[2,1,1],[1,1,0],[0,1,1]]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[2,1,1],[0,1,1],[1,0,1]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[0,2]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Since there are already no fresh oranges at minute 0, the answer is just 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10</code></li>\n\t<li><code>grid[i][j]</code> is <code>0</code>, <code>1</code>, or <code>2</code>.</li>\n</ul>\n",
    "solutions": {},
    "functionName": "getMinutesToRotAllOranges",
    "inputParameters": {
      "cpp": ["grid", "vector<vector<int>>"],
      "java": ["grid", "int[][]"],
      "javascript": ["grid", "number[][]"],
      "python": ["grid", "List[List[int]]"]
    },
    "tests": [
      {
        "input": {
          "grid": [
            [2, 1, 1],
            [1, 1, 0],
            [0, 1, 1]
          ]
        },
        "output": 4
      },
      {
        "input": {
          "grid": [
            [2, 1, 1],
            [0, 1, 1],
            [1, 0, 1]
          ]
        },
        "output": -1
      },
      {
        "input": {
          "grid": [[0, 2]]
        },
        "output": 0
      },
      {
        "input": {
          "grid": [
            [1, 1, 1],
            [1, 1, 1],
            [1, 1, 1]
          ]
        },
        "output": -1
      },
      {
        "input": {
          "grid": [
            [2, 2, 2],
            [2, 2, 2],
            [2, 2, 2]
          ]
        },
        "output": 0
      },
      {
        "input": {
          "grid": [
            [1, 2, 1],
            [1, 2, 1],
            [1, 2, 1]
          ]
        },
        "output": 1
      },
      {
        "input": {
          "grid": [
            [2, 1, 1],
            [1, 1, 1],
            [1, 1, 2]
          ]
        },
        "output": 2
      },
      {
        "input": {
          "grid": [
            [0, 0, 0],
            [0, 1, 0],
            [0, 0, 0]
          ]
        },
        "output": -1
      },
      {
        "input": {
          "grid": [
            [2, 1, 1, 1, 1],
            [1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1],
            [1, 1, 1, 1, 2]
          ]
        },
        "output": 4
      },
      {
        "input": {
          "grid": [[1]]
        },
        "output": -1
      }
    ],
    "title": "Rotting Oranges",
    "metaData": {}
  },
  {
    "category": ["Array", "Divide and Conquer", "Sorting", "Heap (Priority Queue)", "Quickselect"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k<sup>th</sup></code> <em>largest element in the array</em>.</p>\n\n<p>Note that it is the <code>k<sup>th</sup></code> largest element in the sorted order, not the <code>k<sup>th</sup></code> distinct element.</p>\n\n<p>Can you solve it without sorting?</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [3,2,1,5,6,4], k = 2\n<strong>Output:</strong> 5\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [3,2,3,1,2,4,5,5,6], k = 4\n<strong>Output:</strong> 4\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "findKthLargestElement",
    "inputParameters": {
      "cpp": ["nums", "vector<int>", "k", "int"],
      "java": ["nums", "int[]", "k", "int"],
      "javascript": ["nums", "number[]", "k", "number"],
      "python": ["nums", "List[int]", "k", "int"]
    },
    "tests": [
      {
        "input": {
          "nums": [3, 2, 1, 5, 6, 4],
          "k": 2
        },
        "output": 5
      },
      {
        "input": {
          "nums": [3, 2, 3, 1, 2, 4, 5, 5, 6],
          "k": 4
        },
        "output": 4
      },
      {
        "input": {
          "nums": [1],
          "k": 1
        },
        "output": 1
      },
      {
        "input": {
          "nums": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
          "k": 1
        },
        "output": 10
      },
      {
        "input": {
          "nums": [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],
          "k": 10
        },
        "output": 1
      },
      {
        "input": {
          "nums": [-1, -2, -3, -4, -5],
          "k": 3
        },
        "output": -3
      },
      {
        "input": {
          "nums": [5, 5, 5, 5, 5],
          "k": 3
        },
        "output": 5
      },
      {
        "input": {
          "nums": [1, 1, 2, 2, 3, 3, 4, 4, 5, 5],
          "k": 5
        },
        "output": 3
      },
      {
        "input": {
          "nums": [10000, -10000, 0, 1, -1],
          "k": 2
        },
        "output": 1
      },
      {
        "input": {
          "nums": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
          "k": 5
        },
        "output": 6
      }
    ],
    "title": "Kth Largest Element in an Array",
    "metaData": {}
  },
  {
    "category": ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code> of equal length <code>n</code> and a positive integer <code>k</code>. You must choose a <strong>subsequence</strong> of indices from <code>nums1</code> of length <code>k</code>.</p>\n\n<p>For chosen indices <code>i<sub>0</sub></code>, <code>i<sub>1</sub></code>, ..., <code>i<sub>k - 1</sub></code>, your <strong>score</strong> is defined as:</p>\n\n<ul>\n\t<li>The sum of the selected elements from <code>nums1</code> multiplied with the <strong>minimum</strong> of the selected elements from <code>nums2</code>.</li>\n\t<li>It can defined simply as: <code>(nums1[i<sub>0</sub>] + nums1[i<sub>1</sub>] +...+ nums1[i<sub>k - 1</sub>]) * min(nums2[i<sub>0</sub>] , nums2[i<sub>1</sub>], ... ,nums2[i<sub>k - 1</sub>])</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> possible score.</em></p>\n\n<p>A <strong>subsequence</strong> of indices of an array is a set that can be derived from the set <code>{0, 1, ..., n-1}</code> by deleting some or no elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,3,3,2], nums2 = [2,1,3,4], k = 3\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> \nThe four possible subsequence scores are:\n- We choose the indices 0, 1, and 2 with score = (1+3+3) * min(2,1,3) = 7.\n- We choose the indices 0, 1, and 3 with score = (1+3+2) * min(2,1,4) = 6. \n- We choose the indices 0, 2, and 3 with score = (1+3+2) * min(2,3,4) = 12. \n- We choose the indices 1, 2, and 3 with score = (3+3+2) * min(1,3,4) = 8.\nTherefore, we return the max score, which is 12.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [4,2,3,1,1], nums2 = [7,5,10,9,6], k = 1\n<strong>Output:</strong> 30\n<strong>Explanation:</strong> \nChoosing index 2 is optimal: nums1[2] * nums2[2] = 3 * 10 = 30 is the maximum possible score.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length == nums2.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[j] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "maxSubsequenceScore",
    "inputParameters": {
      "cpp": ["nums1", "vector<int>", "nums2", "vector<int>", "k", "int"],
      "java": ["nums1", "int[]", "nums2", "int[]", "k", "int"],
      "javascript": ["nums1", "number[]", "nums2", "number[]", "k", "number"],
      "python": ["nums1", "List[int]", "nums2", "List[int]", "k", "int"]
    },
    "tests": [
      {
        "input": {
          "nums1": [1, 3, 3, 2],
          "nums2": [2, 1, 3, 4],
          "k": 3
        },
        "output": 12
      },
      {
        "input": {
          "nums1": [4, 2, 3, 1, 1],
          "nums2": [7, 5, 10, 9, 6],
          "k": 1
        },
        "output": 30
      },
      {
        "input": {
          "nums1": [1, 2, 3, 4, 5],
          "nums2": [5, 4, 3, 2, 1],
          "k": 2
        },
        "output": 25
      },
      {
        "input": {
          "nums1": [10, 20, 30],
          "nums2": [1, 2, 3],
          "k": 3
        },
        "output": 60
      },
      {
        "input": {
          "nums1": [1, 1, 1, 1],
          "nums2": [1, 1, 1, 1],
          "k": 4
        },
        "output": 4
      },
      {
        "input": {
          "nums1": [100000],
          "nums2": [100000],
          "k": 1
        },
        "output": 10000000000
      },
      {
        "input": {
          "nums1": [1, 2, 3, 4, 5],
          "nums2": [5, 4, 3, 2, 1],
          "k": 5
        },
        "output": 15
      },
      {
        "input": {
          "nums1": [10, 9, 8, 7, 6],
          "nums2": [1, 2, 3, 4, 5],
          "k": 3
        },
        "output": 81
      },
      {
        "input": {
          "nums1": [1, 2, 3],
          "nums2": [3, 2, 1],
          "k": 2
        },
        "output": 10
      },
      {
        "input": {
          "nums1": [5, 5, 5],
          "nums2": [1, 2, 3],
          "k": 1
        },
        "output": 15
      }
    ],
    "title": "Maximum Subsequence Score",
    "metaData": {}
  },
  {
    "category": ["Array", "Two Pointers", "Heap (Priority Queue)", "Simulation"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>You are given a <strong>0-indexed</strong> integer array <code>costs</code> where <code>costs[i]</code> is the cost of hiring the <code>i<sup>th</sup></code> worker.</p>\n\n<p>You are also given two integers <code>k</code> and <code>candidates</code>. We want to hire exactly <code>k</code> workers according to the following rules:</p>\n\n<ul>\n\t<li>You will run <code>k</code> sessions and hire exactly one worker in each session.</li>\n\t<li>In each hiring session, choose the worker with the lowest cost from either the first <code>candidates</code> workers or the last <code>candidates</code> workers. Break the tie by the smallest index.\n\t<ul>\n\t\t<li>For example, if <code>costs = [3,2,7,7,1,2]</code> and <code>candidates = 2</code>, then in the first hiring session, we will choose the <code>4<sup>th</sup></code> worker because they have the lowest cost <code>[<u>3,2</u>,7,7,<u><strong>1</strong>,2</u>]</code>.</li>\n\t\t<li>In the second hiring session, we will choose <code>1<sup>st</sup></code> worker because they have the same lowest cost as <code>4<sup>th</sup></code> worker but they have the smallest index <code>[<u>3,<strong>2</strong></u>,7,<u>7,2</u>]</code>. Please note that the indexing may be changed in the process.</li>\n\t</ul>\n\t</li>\n\t<li>If there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index.</li>\n\t<li>A worker can only be chosen once.</li>\n</ul>\n\n<p>Return <em>the total cost to hire exactly </em><code>k</code><em> workers.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [<u>17,12,10,2</u>,7,<u>2,11,20,8</u>]. The lowest cost is 2, and we break the tie by the smallest index, which is 3. The total cost = 0 + 2 = 2.\n- In the second hiring round we choose the worker from [<u>17,12,10,7</u>,<u>2,11,20,8</u>]. The lowest cost is 2 (index 4). The total cost = 2 + 2 = 4.\n- In the third hiring round we choose the worker from [<u>17,12,10,7,11,20,8</u>]. The lowest cost is 7 (index 3). The total cost = 4 + 7 = 11. Notice that the worker with index 3 was common in the first and last four workers.\nThe total hiring cost is 11.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [1,2,4,1], k = 3, candidates = 3\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [<u>1,2,4,1</u>]. The lowest cost is 1, and we break the tie by the smallest index, which is 0. The total cost = 0 + 1 = 1. Notice that workers with index 1 and 2 are common in the first and last 3 workers.\n- In the second hiring round we choose the worker from [<u>2,4,1</u>]. The lowest cost is 1 (index 2). The total cost = 1 + 1 = 2.\n- In the third hiring round there are less than three candidates. We choose the worker from the remaining workers [<u>2,4</u>]. The lowest cost is 2 (index 0). The total cost = 2 + 2 = 4.\nThe total hiring cost is 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= costs.length &lt;= 10<sup>5 </sup></code></li>\n\t<li><code>1 &lt;= costs[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k, candidates &lt;= costs.length</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "calculateMinCostToHireKWorkers",
    "inputParameters": {
      "cpp": ["costs", "vector<int>", "k", "int", "candidates", "int"],
      "java": ["costs", "int[]", "k", "int", "candidates", "int"],
      "javascript": ["costs", "number[]", "k", "number", "candidates", "number"],
      "python": ["costs", "List[int]", "k", "int", "candidates", "int"]
    },
    "tests": [
      {
        "input": {
          "costs": [17, 12, 10, 2, 7, 2, 11, 20, 8],
          "k": 3,
          "candidates": 4
        },
        "output": 11
      },
      {
        "input": {
          "costs": [1, 2, 4, 1],
          "k": 3,
          "candidates": 3
        },
        "output": 4
      },
      {
        "input": {
          "costs": [10, 20, 30, 40, 50],
          "k": 2,
          "candidates": 2
        },
        "output": 60
      },
      {
        "input": {
          "costs": [5, 5, 5, 5, 5],
          "k": 3,
          "candidates": 5
        },
        "output": 15
      },
      {
        "input": {
          "costs": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
          "k": 5,
          "candidates": 3
        },
        "output": 15
      },
      {
        "input": {
          "costs": [100],
          "k": 1,
          "candidates": 1
        },
        "output": 100
      },
      {
        "input": {
          "costs": [50, 30, 20, 10, 40],
          "k": 3,
          "candidates": 1
        },
        "output": 80
      },
      {
        "input": {
          "costs": [1, 1, 1, 1, 1, 1, 1, 1],
          "k": 8,
          "candidates": 8
        },
        "output": 8
      },
      {
        "input": {
          "costs": [10, 5, 15, 20, 25],
          "k": 2,
          "candidates": 3
        },
        "output": 15
      },
      {
        "input": {
          "costs": [100, 80, 60, 40, 20],
          "k": 3,
          "candidates": 2
        },
        "output": 160
      }
    ],
    "title": "Total Cost to Hire K Workers",
    "metaData": {}
  },
  {
    "category": ["Array", "Two Pointers", "Binary Search", "Sorting"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>You are given two positive integer arrays <code>spells</code> and <code>potions</code>, of length <code>n</code> and <code>m</code> respectively, where <code>spells[i]</code> represents the strength of the <code>i<sup>th</sup></code> spell and <code>potions[j]</code> represents the strength of the <code>j<sup>th</sup></code> potion.</p>\n\n<p>You are also given an integer <code>success</code>. A spell and potion pair is considered <strong>successful</strong> if the <strong>product</strong> of their strengths is <strong>at least</strong> <code>success</code>.</p>\n\n<p>Return <em>an integer array </em><code>pairs</code><em> of length </em><code>n</code><em> where </em><code>pairs[i]</code><em> is the number of <strong>potions</strong> that will form a successful pair with the </em><code>i<sup>th</sup></code><em> spell.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> spells = [5,1,3], potions = [1,2,3,4,5], success = 7\n<strong>Output:</strong> [4,0,3]\n<strong>Explanation:</strong>\n- 0<sup>th</sup> spell: 5 * [1,2,3,4,5] = [5,<u><strong>10</strong></u>,<u><strong>15</strong></u>,<u><strong>20</strong></u>,<u><strong>25</strong></u>]. 4 pairs are successful.\n- 1<sup>st</sup> spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.\n- 2<sup>nd</sup> spell: 3 * [1,2,3,4,5] = [3,6,<u><strong>9</strong></u>,<u><strong>12</strong></u>,<u><strong>15</strong></u>]. 3 pairs are successful.\nThus, [4,0,3] is returned.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> spells = [3,1,2], potions = [8,5,8], success = 16\n<strong>Output:</strong> [2,0,2]\n<strong>Explanation:</strong>\n- 0<sup>th</sup> spell: 3 * [8,5,8] = [<u><strong>24</strong></u>,15,<u><strong>24</strong></u>]. 2 pairs are successful.\n- 1<sup>st</sup> spell: 1 * [8,5,8] = [8,5,8]. 0 pairs are successful. \n- 2<sup>nd</sup> spell: 2 * [8,5,8] = [<strong><u>16</u></strong>,10,<u><strong>16</strong></u>]. 2 pairs are successful. \nThus, [2,0,2] is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == spells.length</code></li>\n\t<li><code>m == potions.length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= spells[i], potions[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= success &lt;= 10<sup>10</sup></code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "countSuccessfulSpellPotionPairs",
    "inputParameters": {
      "cpp": ["spells", "vector<int>", "potions", "vector<int>", "success", "long long"],
      "java": ["spells", "int[]", "potions", "int[]", "success", "long"],
      "javascript": ["spells", "number[]", "potions", "number[]", "success", "number"],
      "python": ["spells", "List[int]", "potions", "List[int]", "success", "int"]
    },
    "tests": [
      {
        "input": {
          "spells": [5, 1, 3],
          "potions": [1, 2, 3, 4, 5],
          "success": 7
        },
        "output": [4, 0, 3]
      },
      {
        "input": {
          "spells": [3, 1, 2],
          "potions": [8, 5, 8],
          "success": 16
        },
        "output": [2, 0, 2]
      },
      {
        "input": {
          "spells": [1, 2, 3, 4, 5],
          "potions": [1, 2, 3, 4, 5],
          "success": 10
        },
        "output": [0, 1, 2, 3, 4]
      },
      {
        "input": {
          "spells": [10],
          "potions": [1, 2, 3, 4, 5],
          "success": 50
        },
        "output": [1]
      },
      {
        "input": {
          "spells": [1, 1, 1],
          "potions": [1],
          "success": 2
        },
        "output": [0, 0, 0]
      },
      {
        "input": {
          "spells": [100000],
          "potions": [100000],
          "success": 10000000000
        },
        "output": [1]
      },
      {
        "input": {
          "spells": [1, 2, 3, 4, 5],
          "potions": [5, 4, 3, 2, 1],
          "success": 6
        },
        "output": [4, 4, 3, 2, 1]
      },
      {
        "input": {
          "spells": [5, 5, 5],
          "potions": [1, 1, 1, 1, 1],
          "success": 6
        },
        "output": [0, 0, 0]
      },
      {
        "input": {
          "spells": [1, 2, 3, 4, 5],
          "potions": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
          "success": 5
        },
        "output": [6, 8, 9, 9, 10]
      },
      {
        "input": {
          "spells": [10, 20, 30, 40, 50],
          "potions": [1, 2, 3, 4, 5],
          "success": 100
        },
        "output": [3, 4, 5, 5, 5]
      }
    ],
    "title": "Successful Pairs of Spells and Potions",
    "metaData": {}
  },
  {
    "category": ["Array", "Binary Search"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>A peak element is an element that is strictly greater than its neighbors.</p>\n\n<p>Given a <strong>0-indexed</strong> integer array <code>nums</code>, find a peak element, and return its index. If the array contains multiple peaks, return the index to <strong>any of the peaks</strong>.</p>\n\n<p>You may imagine that <code>nums[-1] = nums[n] = -&infin;</code>. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.</p>\n\n<p>You must write an algorithm that runs in <code>O(log n)</code> time.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 3 is a peak element and your function should return the index number 2.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,3,5,6,4]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>nums[i] != nums[i + 1]</code> for all valid <code>i</code>.</li>\n</ul>\n",
    "solutions": {},
    "functionName": "findPeakElementIndex",
    "inputParameters": {
      "cpp": ["nums", "vector<int>"],
      "java": ["nums", "int[]"],
      "javascript": ["nums", "number[]"],
      "python": ["nums", "List[int]"]
    },
    "tests": [
      {
        "input": {
          "nums": [1, 2, 3, 1]
        },
        "output": 2
      },
      {
        "input": {
          "nums": [1, 2, 1, 3, 5, 6, 4]
        },
        "output": 5
      },
      {
        "input": {
          "nums": [1]
        },
        "output": 0
      },
      {
        "input": {
          "nums": [1, 2]
        },
        "output": 1
      },
      {
        "input": {
          "nums": [3, 2, 1]
        },
        "output": 0
      },
      {
        "input": {
          "nums": [1, 2, 3, 4, 5]
        },
        "output": 4
      },
      {
        "input": {
          "nums": [5, 4, 3, 2, 1]
        },
        "output": 0
      },
      {
        "input": {
          "nums": [1, 3, 2, 4, 1, 5, 6, 4]
        },
        "output": 6
      },
      {
        "input": {
          "nums": [1, 2, 1, 2, 1, 2, 1]
        },
        "output": 5
      },
      {
        "input": {
          "nums": [-2147483648, 2147483647]
        },
        "output": 1
      }
    ],
    "title": "Find Peak Element",
    "metaData": {}
  },
  {
    "category": ["Array", "Binary Search"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>Koko loves to eat bananas. There are <code>n</code> piles of bananas, the <code>i<sup>th</sup></code> pile has <code>piles[i]</code> bananas. The guards have gone and will come back in <code>h</code> hours.</p>\n\n<p>Koko can decide her bananas-per-hour eating speed of <code>k</code>. Each hour, she chooses some pile of bananas and eats <code>k</code> bananas from that pile. If the pile has less than <code>k</code> bananas, she eats all of them instead and will not eat any more bananas during this hour.</p>\n\n<p>Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.</p>\n\n<p>Return <em>the minimum integer</em> <code>k</code> <em>such that she can eat all the bananas within</em> <code>h</code> <em>hours</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [3,6,7,11], h = 8\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [30,11,23,4,20], h = 5\n<strong>Output:</strong> 30\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [30,11,23,4,20], h = 6\n<strong>Output:</strong> 23\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= piles.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>piles.length &lt;= h &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= piles[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "minEatingSpeed",
    "inputParameters": {
      "cpp": ["piles", "vector<int>", "h", "int"],
      "java": ["piles", "int[]", "h", "int"],
      "javascript": ["piles", "number[]", "h", "number"],
      "python": ["piles", "List[int]", "h", "int"]
    },
    "tests": [
      {
        "input": {
          "piles": [3, 6, 7, 11],
          "h": 8
        },
        "output": 4
      },
      {
        "input": {
          "piles": [30, 11, 23, 4, 20],
          "h": 5
        },
        "output": 30
      },
      {
        "input": {
          "piles": [30, 11, 23, 4, 20],
          "h": 6
        },
        "output": 23
      },
      {
        "input": {
          "piles": [1],
          "h": 1
        },
        "output": 1
      },
      {
        "input": {
          "piles": [1, 2, 3, 4, 5],
          "h": 5
        },
        "output": 5
      },
      {
        "input": {
          "piles": [1000000000],
          "h": 2
        },
        "output": 500000000
      },
      {
        "input": {
          "piles": [1, 1, 1, 1],
          "h": 8
        },
        "output": 1
      },
      {
        "input": {
          "piles": [3, 6, 7, 11],
          "h": 6
        },
        "output": 5
      },
      {
        "input": {
          "piles": [312884470],
          "h": 968709470
        },
        "output": 1
      },
      {
        "input": {
          "piles": [805306368, 805306368, 805306368],
          "h": 1000000000
        },
        "output": 3
      }
    ],
    "title": "Koko Eating Bananas",
    "metaData": {}
  },
  {
    "category": ["Hash Table", "String", "Backtracking"],
    "difficulty": 2,
    "evalMode": "sortedMatch",
    "question": "<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in <strong>any order</strong>.</p>\n\n<p>A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png\" style=\"width: 300px; height: 243px;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;23&quot;\n<strong>Output:</strong> [&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;&quot;\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;2&quot;\n<strong>Output:</strong> [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= digits.length &lt;= 4</code></li>\n\t<li><code>digits[i]</code> is a digit in the range <code>[&#39;2&#39;, &#39;9&#39;]</code>.</li>\n</ul>\n",
    "solutions": {},
    "functionName": "generatePhoneLetterCombinations",
    "inputParameters": {
      "cpp": ["digits", "string"],
      "java": ["digits", "String"],
      "javascript": ["digits", "string"],
      "python": ["digits", "str"]
    },
    "tests": [
      {
        "input": {
          "digits": "23"
        },
        "output": ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]
      },
      {
        "input": {
          "digits": ""
        },
        "output": []
      },
      {
        "input": {
          "digits": "2"
        },
        "output": ["a", "b", "c"]
      },
      {
        "input": {
          "digits": "9"
        },
        "output": ["w", "x", "y", "z"]
      },
      {
        "input": {
          "digits": "234"
        },
        "output": [
          "adg",
          "adh",
          "adi",
          "aeg",
          "aeh",
          "aei",
          "afg",
          "afh",
          "afi",
          "bdg",
          "bdh",
          "bdi",
          "beg",
          "beh",
          "bei",
          "bfg",
          "bfh",
          "bfi",
          "cdg",
          "cdh",
          "cdi",
          "ceg",
          "ceh",
          "cei",
          "cfg",
          "cfh",
          "cfi"
        ]
      },
      {
        "input": {
          "digits": "7"
        },
        "output": ["p", "q", "r", "s"]
      },
      {
        "input": {
          "digits": "56"
        },
        "output": ["jm", "jn", "jo", "km", "kn", "ko", "lm", "ln", "lo"]
      },
      {
        "input": {
          "digits": "999"
        },
        "output": [
          "www",
          "wwx",
          "wwy",
          "wwz",
          "wxw",
          "wxx",
          "wxy",
          "wxz",
          "wyw",
          "wyx",
          "wyy",
          "wyz",
          "wzw",
          "wzx",
          "wzy",
          "wzz",
          "xww",
          "xwx",
          "xwy",
          "xwz",
          "xxw",
          "xxx",
          "xxy",
          "xxz",
          "xyw",
          "xyx",
          "xyy",
          "xyz",
          "xzw",
          "xzx",
          "xzy",
          "xzz",
          "yww",
          "ywx",
          "ywy",
          "ywz",
          "yxw",
          "yxx",
          "yxy",
          "yxz",
          "yyw",
          "yyx",
          "yyy",
          "yyz",
          "yzw",
          "yzx",
          "yzy",
          "yzz",
          "zww",
          "zwx",
          "zwy",
          "zwz",
          "zxw",
          "zxx",
          "zxy",
          "zxz",
          "zyw",
          "zyx",
          "zyy",
          "zyz",
          "zzw",
          "zzx",
          "zzy",
          "zzz"
        ]
      },
      {
        "input": {
          "digits": "4321"
        },
        "output": []
      },
      {
        "input": {
          "digits": "8888"
        },
        "output": [
          "tttt",
          "tttv",
          "tttu",
          "ttvt",
          "ttvv",
          "ttvu",
          "ttut",
          "ttuv",
          "ttuu",
          "tvtt",
          "tvtv",
          "tvtu",
          "tvvt",
          "tvvv",
          "tvvu",
          "tvut",
          "tvuv",
          "tvuu",
          "tutt",
          "tutv",
          "tutu",
          "tuvt",
          "tuvv",
          "tuvu",
          "tuut",
          "tuuv",
          "tuuu",
          "vttt",
          "vttv",
          "vttu",
          "vtvt",
          "vtvv",
          "vtvu",
          "vtut",
          "vtuv",
          "vtuu",
          "vvtt",
          "vvtv",
          "vvtu",
          "vvvt",
          "vvvv",
          "vvvu",
          "vvut",
          "vvuv",
          "vvuu",
          "vutt",
          "vutv",
          "vutu",
          "vuvt",
          "vuvv",
          "vuvu",
          "vuut",
          "vuuv",
          "vuuu",
          "uttt",
          "uttv",
          "uttu",
          "utvt",
          "utvv",
          "utvu",
          "utut",
          "utuv",
          "utuu",
          "uvtt",
          "uvtv",
          "uvtu",
          "uvvt",
          "uvvv",
          "uvvu",
          "uvut",
          "uvuv",
          "uvuu",
          "uutt",
          "uutv",
          "uutu",
          "uuvt",
          "uuvv",
          "uuvu",
          "uuut",
          "uuuv",
          "uuuu"
        ]
      }
    ],
    "title": "Letter Combinations of a Phone Number",
    "metaData": {}
  },
  {
    "category": ["Array", "Backtracking"],
    "difficulty": 2,
    "evalMode": "sortedMatch",
    "question": "<p>Find all valid combinations of <code>k</code> numbers that sum up to <code>n</code> such that the following conditions are true:</p>\n\n<ul>\n\t<li>Only numbers <code>1</code> through <code>9</code> are used.</li>\n\t<li>Each number is used <strong>at most once</strong>.</li>\n</ul>\n\n<p>Return <em>a list of all possible valid combinations</em>. The list must not contain the same combination twice, and the combinations may be returned in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, n = 7\n<strong>Output:</strong> [[1,2,4]]\n<strong>Explanation:</strong>\n1 + 2 + 4 = 7\nThere are no other valid combinations.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, n = 9\n<strong>Output:</strong> [[1,2,6],[1,3,5],[2,3,4]]\n<strong>Explanation:</strong>\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 4, n = 1\n<strong>Output:</strong> []\n<strong>Explanation:</strong> There are no valid combinations.\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 &gt; 1, there are no valid combination.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= k &lt;= 9</code></li>\n\t<li><code>1 &lt;= n &lt;= 60</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "findUniqueCombinationsWithSum",
    "inputParameters": {
      "cpp": ["k", "int", "n", "int"],
      "java": ["k", "int", "n", "int"],
      "javascript": ["k", "number", "n", "number"],
      "python": ["k", "int", "n", "int"]
    },
    "tests": [
      {
        "input": {
          "k": 3,
          "n": 7
        },
        "output": [[1, 2, 4]]
      },
      {
        "input": {
          "k": 3,
          "n": 9
        },
        "output": [
          [1, 2, 6],
          [1, 3, 5],
          [2, 3, 4]
        ]
      },
      {
        "input": {
          "k": 4,
          "n": 1
        },
        "output": []
      },
      {
        "input": {
          "k": 2,
          "n": 18
        },
        "output": [[9, 9]]
      },
      {
        "input": {
          "k": 5,
          "n": 15
        },
        "output": [[1, 2, 3, 4, 5]]
      },
      {
        "input": {
          "k": 3,
          "n": 15
        },
        "output": [
          [1, 5, 9],
          [1, 6, 8],
          [2, 4, 9],
          [2, 5, 8],
          [2, 6, 7],
          [3, 4, 8],
          [3, 5, 7],
          [4, 5, 6]
        ]
      },
      {
        "input": {
          "k": 2,
          "n": 10
        },
        "output": [
          [1, 9],
          [2, 8],
          [3, 7],
          [4, 6]
        ]
      },
      {
        "input": {
          "k": 4,
          "n": 24
        },
        "output": [
          [1, 6, 8, 9],
          [2, 5, 8, 9],
          [2, 6, 7, 9],
          [3, 4, 8, 9],
          [3, 5, 7, 9],
          [3, 6, 7, 8],
          [4, 5, 6, 9],
          [4, 5, 7, 8]
        ]
      },
      {
        "input": {
          "k": 9,
          "n": 45
        },
        "output": [[1, 2, 3, 4, 5, 6, 7, 8, 9]]
      },
      {
        "input": {
          "k": 3,
          "n": 25
        },
        "output": []
      }
    ],
    "title": "Combination Sum III",
    "metaData": {}
  },
  {
    "category": ["Math", "Dynamic Programming", "Memoization"],
    "difficulty": 1,
    "evalMode": "exactMatch",
    "question": "<p>The Tribonacci sequence T<sub>n</sub> is defined as follows:&nbsp;</p>\n\n<p>T<sub>0</sub> = 0, T<sub>1</sub> = 1, T<sub>2</sub> = 1, and T<sub>n+3</sub> = T<sub>n</sub> + T<sub>n+1</sub> + T<sub>n+2</sub> for n &gt;= 0.</p>\n\n<p>Given <code>n</code>, return the value of T<sub>n</sub>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\nT_3 = 0 + 1 + 1 = 2\nT_4 = 1 + 1 + 2 = 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 25\n<strong>Output:</strong> 1389537\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 37</code></li>\n\t<li>The answer is guaranteed to fit within a 32-bit integer, ie. <code>answer &lt;= 2^31 - 1</code>.</li>\n</ul>\n",
    "solutions": {},
    "functionName": "getNthTribonacciNumber",
    "inputParameters": {
      "cpp": ["n", "int"],
      "java": ["n", "int"],
      "javascript": ["n", "number"],
      "python": ["n", "int"]
    },
    "tests": [
      {
        "input": {
          "n": 0
        },
        "output": 0
      },
      {
        "input": {
          "n": 1
        },
        "output": 1
      },
      {
        "input": {
          "n": 2
        },
        "output": 1
      },
      {
        "input": {
          "n": 3
        },
        "output": 2
      },
      {
        "input": {
          "n": 4
        },
        "output": 4
      },
      {
        "input": {
          "n": 5
        },
        "output": 7
      },
      {
        "input": {
          "n": 10
        },
        "output": 149
      },
      {
        "input": {
          "n": 20
        },
        "output": 66012
      },
      {
        "input": {
          "n": 25
        },
        "output": 1389537
      },
      {
        "input": {
          "n": 37
        },
        "output": 2082876103
      }
    ],
    "title": "N-th Tribonacci Number",
    "metaData": {}
  },
  {
    "category": ["Array", "Dynamic Programming"],
    "difficulty": 1,
    "evalMode": "exactMatch",
    "question": "<p>You are given an integer array <code>cost</code> where <code>cost[i]</code> is the cost of <code>i<sup>th</sup></code> step on a staircase. Once you pay the cost, you can either climb one or two steps.</p>\n\n<p>You can either start from the step with index <code>0</code>, or the step with index <code>1</code>.</p>\n\n<p>Return <em>the minimum cost to reach the top of the floor</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> cost = [10,<u>15</u>,20]\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> cost = [<u>1</u>,100,<u>1</u>,1,<u>1</u>,100,<u>1</u>,<u>1</u>,100,<u>1</u>]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= cost.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= cost[i] &lt;= 999</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "minCostClimbingStairs",
    "inputParameters": {
      "cpp": ["cost", "vector<int>"],
      "java": ["cost", "int[]"],
      "javascript": ["cost", "number[]"],
      "python": ["cost", "List[int]"]
    },
    "tests": [
      {
        "input": {
          "cost": [10, 15, 20]
        },
        "output": 15
      },
      {
        "input": {
          "cost": [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
        },
        "output": 6
      },
      {
        "input": {
          "cost": [0, 0, 0, 0]
        },
        "output": 0
      },
      {
        "input": {
          "cost": [1, 2]
        },
        "output": 1
      },
      {
        "input": {
          "cost": [10, 15, 20, 25, 30]
        },
        "output": 40
      },
      {
        "input": {
          "cost": [5, 10, 15, 20, 25, 30]
        },
        "output": 45
      },
      {
        "input": {
          "cost": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        },
        "output": 5
      },
      {
        "input": {
          "cost": [999, 999, 999, 999]
        },
        "output": 1998
      },
      {
        "input": {
          "cost": [1, 100, 1, 100, 1, 100, 1, 100, 1]
        },
        "output": 5
      },
      {
        "input": {
          "cost": [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
        },
        "output": 260
      }
    ],
    "title": "Min Cost Climbing Stairs",
    "metaData": {}
  },
  {
    "category": ["Array", "Dynamic Programming"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and <b>it will automatically contact the police if two adjacent houses were broken into on the same night</b>.</p>\n\n<p>Given an integer array <code>nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight <b>without alerting the police</b></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,9,3,1]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 400</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "maximizeNonAdjacentRobbery",
    "inputParameters": {
      "cpp": ["nums", "vector<int>"],
      "java": ["nums", "int[]"],
      "javascript": ["nums", "number[]"],
      "python": ["nums", "List[int]"]
    },
    "tests": [
      {
        "input": {
          "nums": [1, 2, 3, 1]
        },
        "output": 4
      },
      {
        "input": {
          "nums": [2, 7, 9, 3, 1]
        },
        "output": 12
      },
      {
        "input": {
          "nums": [1, 1, 1, 1]
        },
        "output": 2
      },
      {
        "input": {
          "nums": [5, 3, 4, 11, 2]
        },
        "output": 16
      },
      {
        "input": {
          "nums": [1]
        },
        "output": 1
      },
      {
        "input": {
          "nums": [10, 1, 1, 10]
        },
        "output": 20
      },
      {
        "input": {
          "nums": [0, 0, 0, 0, 0]
        },
        "output": 0
      },
      {
        "input": {
          "nums": [200, 234, 182, 111, 87, 194, 221, 217, 71, 162]
        },
        "output": 954
      },
      {
        "input": {
          "nums": [4, 1, 2, 7, 5, 3, 1]
        },
        "output": 14
      },
      {
        "input": {
          "nums": [
            114, 117, 207, 117, 235, 82, 90, 67, 143, 146, 53, 108, 200, 91, 80, 223, 58, 170, 110,
            236, 81, 90, 222, 160, 165, 195, 187, 199, 114, 235, 197, 187, 69, 129, 64, 214, 228,
            78, 188, 67, 205, 94, 205, 169, 241, 202, 144, 240
          ]
        },
        "output": 4173
      }
    ],
    "title": "House Robber",
    "metaData": {}
  },
  {
    "category": ["Dynamic Programming"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>You have two types of tiles: a <code>2 x 1</code> domino shape and a tromino shape. You may rotate these shapes.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/15/lc-domino.jpg\" style=\"width: 362px; height: 195px;\" />\n<p>Given an integer n, return <em>the number of ways to tile an</em> <code>2 x n</code> <em>board</em>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/15/lc-domino1.jpg\" style=\"width: 500px; height: 226px;\" />\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The five different ways are show above.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "numTilings",
    "inputParameters": {
      "cpp": ["n", "int"],
      "java": ["n", "int"],
      "javascript": ["n", "number"],
      "python": ["n", "int"]
    },
    "tests": [
      {
        "input": {
          "n": 1
        },
        "output": 1
      },
      {
        "input": {
          "n": 2
        },
        "output": 2
      },
      {
        "input": {
          "n": 3
        },
        "output": 5
      },
      {
        "input": {
          "n": 4
        },
        "output": 11
      },
      {
        "input": {
          "n": 5
        },
        "output": 24
      },
      {
        "input": {
          "n": 10
        },
        "output": 1389
      },
      {
        "input": {
          "n": 20
        },
        "output": 3418626
      },
      {
        "input": {
          "n": 50
        },
        "output": 84366482
      },
      {
        "input": {
          "n": 100
        },
        "output": 687995182
      },
      {
        "input": {
          "n": 1000
        },
        "output": 979232805
      }
    ],
    "title": "Domino and Tromino Tiling",
    "metaData": {}
  },
  {
    "category": ["Math", "Dynamic Programming", "Combinatorics"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>There is a robot on an <code>m x n</code> grid. The robot is initially located at the <strong>top-left corner</strong> (i.e., <code>grid[0][0]</code>). The robot tries to move to the <strong>bottom-right corner</strong> (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p>\n\n<p>Given the two integers <code>m</code> and <code>n</code>, return <em>the number of possible unique paths that the robot can take to reach the bottom-right corner</em>.</p>\n\n<p>The test cases are generated so that the answer will be less than or equal to <code>2 * 10<sup>9</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png\" style=\"width: 400px; height: 183px;\" />\n<pre>\n<strong>Input:</strong> m = 3, n = 7\n<strong>Output:</strong> 28\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 3, n = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -&gt; Down -&gt; Down\n2. Down -&gt; Down -&gt; Right\n3. Down -&gt; Right -&gt; Down\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "countUniquePaths",
    "inputParameters": {
      "cpp": ["m", "int", "n", "int"],
      "java": ["m", "int", "n", "int"],
      "javascript": ["m", "number", "n", "number"],
      "python": ["m", "int", "n", "int"]
    },
    "tests": [
      {
        "input": {
          "m": 3,
          "n": 7
        },
        "output": 28
      },
      {
        "input": {
          "m": 3,
          "n": 2
        },
        "output": 3
      },
      {
        "input": {
          "m": 1,
          "n": 1
        },
        "output": 1
      },
      {
        "input": {
          "m": 2,
          "n": 2
        },
        "output": 2
      },
      {
        "input": {
          "m": 4,
          "n": 4
        },
        "output": 70
      },
      {
        "input": {
          "m": 5,
          "n": 3
        },
        "output": 15
      },
      {
        "input": {
          "m": 7,
          "n": 3
        },
        "output": 28
      },
      {
        "input": {
          "m": 10,
          "n": 10
        },
        "output": 48620
      },
      {
        "input": {
          "m": 15,
          "n": 15
        },
        "output": 155117520
      },
      {
        "input": {
          "m": 100,
          "n": 1
        },
        "output": 1
      }
    ],
    "title": "Unique Paths",
    "metaData": {}
  },
  {
    "category": ["String", "Dynamic Programming"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>Given two strings <code>text1</code> and <code>text2</code>, return <em>the length of their longest <strong>common subsequence</strong>. </em>If there is no <strong>common subsequence</strong>, return <code>0</code>.</p>\n\n<p>A <strong>subsequence</strong> of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p>\n\n<ul>\n\t<li>For example, <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;abcde&quot;</code>.</li>\n</ul>\n\n<p>A <strong>common subsequence</strong> of two strings is a subsequence that is common to both strings.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> text1 = &quot;abcde&quot;, text2 = &quot;ace&quot; \n<strong>Output:</strong> 3  \n<strong>Explanation:</strong> The longest common subsequence is &quot;ace&quot; and its length is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> text1 = &quot;abc&quot;, text2 = &quot;abc&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest common subsequence is &quot;abc&quot; and its length is 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> text1 = &quot;abc&quot;, text2 = &quot;def&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no such common subsequence, so the result is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li>\n\t<li><code>text1</code> and <code>text2</code> consist of only lowercase English characters.</li>\n</ul>\n",
    "solutions": {},
    "functionName": "longestCommonSubsequenceLength",
    "inputParameters": {
      "cpp": ["text1", "string", "text2", "string"],
      "java": ["text1", "String", "text2", "String"],
      "javascript": ["text1", "string", "text2", "string"],
      "python": ["text1", "str", "text2", "str"]
    },
    "tests": [
      {
        "input": {
          "text1": "abcde",
          "text2": "ace"
        },
        "output": 3
      },
      {
        "input": {
          "text1": "abc",
          "text2": "abc"
        },
        "output": 3
      },
      {
        "input": {
          "text1": "abc",
          "text2": "def"
        },
        "output": 0
      },
      {
        "input": {
          "text1": "bsbininm",
          "text2": "jmjkbkjkv"
        },
        "output": 1
      },
      {
        "input": {
          "text1": "oxcpqrsvwf",
          "text2": "shmtulqrypy"
        },
        "output": 2
      },
      {
        "input": {
          "text1": "abcdefghij",
          "text2": "ecdgi"
        },
        "output": 4
      },
      {
        "input": {
          "text1": "aaaaaa",
          "text2": "aaaaaaa"
        },
        "output": 6
      },
      {
        "input": {
          "text1": "pqrstuvwxyz",
          "text2": "abcdefghij"
        },
        "output": 0
      },
      {
        "input": {
          "text1": "mhunuzqrkzsnidwbun",
          "text2": "szulspmhwpazoxijwbq"
        },
        "output": 6
      },
      {
        "input": {
          "text1": "a",
          "text2": "b"
        },
        "output": 0
      }
    ],
    "title": "Longest Common Subsequence",
    "metaData": {}
  },
  {
    "category": ["Array", "Dynamic Programming", "Greedy"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day, and an integer <code>fee</code> representing a transaction fee.</p>\n\n<p>Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</li>\n\t<li>The transaction fee is only charged once for each stock purchase and sale.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1,3,2,8,4,9], fee = 2\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> The maximum profit can be achieved by:\n- Buying at prices[0] = 1\n- Selling at prices[3] = 8\n- Buying at prices[4] = 4\n- Selling at prices[5] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1,3,7,5,10,3], fee = 3\n<strong>Output:</strong> 6\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prices.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= prices[i] &lt; 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= fee &lt; 5 * 10<sup>4</sup></code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "maxProfitWithFee",
    "inputParameters": {
      "cpp": ["prices", "vector<int>", "fee", "int"],
      "java": ["prices", "int[]", "fee", "int"],
      "javascript": ["prices", "number[]", "fee", "number"],
      "python": ["prices", "List[int]", "fee", "int"]
    },
    "tests": [
      {
        "input": {
          "prices": [1, 3, 2, 8, 4, 9],
          "fee": 2
        },
        "output": 8
      },
      {
        "input": {
          "prices": [1, 3, 7, 5, 10, 3],
          "fee": 3
        },
        "output": 6
      },
      {
        "input": {
          "prices": [1, 2, 3, 4, 5],
          "fee": 1
        },
        "output": 3
      },
      {
        "input": {
          "prices": [5, 4, 3, 2, 1],
          "fee": 1
        },
        "output": 0
      },
      {
        "input": {
          "prices": [1, 1, 1, 1, 1],
          "fee": 1
        },
        "output": 0
      },
      {
        "input": {
          "prices": [10, 20, 30, 40, 50],
          "fee": 5
        },
        "output": 35
      },
      {
        "input": {
          "prices": [1, 5, 1, 5, 1, 5],
          "fee": 2
        },
        "output": 6
      },
      {
        "input": {
          "prices": [1, 100, 1, 100],
          "fee": 50
        },
        "output": 98
      },
      {
        "input": {
          "prices": [1, 3, 2, 8, 4, 9, 10],
          "fee": 3
        },
        "output": 11
      },
      {
        "input": {
          "prices": [1],
          "fee": 0
        },
        "output": 0
      }
    ],
    "title": "Best Time to Buy and Sell Stock with Transaction Fee",
    "metaData": {}
  },
  {
    "category": ["String", "Dynamic Programming"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>Given two strings <code>word1</code> and <code>word2</code>, return <em>the minimum number of operations required to convert <code>word1</code> to <code>word2</code></em>.</p>\n\n<p>You have the following three operations permitted on a word:</p>\n\n<ul>\n\t<li>Insert a character</li>\n\t<li>Delete a character</li>\n\t<li>Replace a character</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;horse&quot;, word2 = &quot;ros&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nhorse -&gt; rorse (replace &#39;h&#39; with &#39;r&#39;)\nrorse -&gt; rose (remove &#39;r&#39;)\nrose -&gt; ros (remove &#39;e&#39;)\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;intention&quot;, word2 = &quot;execution&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> \nintention -&gt; inention (remove &#39;t&#39;)\ninention -&gt; enention (replace &#39;i&#39; with &#39;e&#39;)\nenention -&gt; exention (replace &#39;n&#39; with &#39;x&#39;)\nexention -&gt; exection (replace &#39;n&#39; with &#39;c&#39;)\nexection -&gt; execution (insert &#39;u&#39;)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li>\n\t<li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li>\n</ul>\n",
    "solutions": {},
    "functionName": "minOperationsToConvertString",
    "inputParameters": {
      "cpp": ["word1", "string", "word2", "string"],
      "java": ["word1", "String", "word2", "String"],
      "javascript": ["word1", "string", "word2", "string"],
      "python": ["word1", "str", "word2", "str"]
    },
    "tests": [
      {
        "input": {
          "word1": "horse",
          "word2": "ros"
        },
        "output": 3
      },
      {
        "input": {
          "word1": "intention",
          "word2": "execution"
        },
        "output": 5
      },
      {
        "input": {
          "word1": "cat",
          "word2": "cut"
        },
        "output": 1
      },
      {
        "input": {
          "word1": "sunday",
          "word2": "saturday"
        },
        "output": 3
      },
      {
        "input": {
          "word1": "",
          "word2": "abc"
        },
        "output": 3
      },
      {
        "input": {
          "word1": "abc",
          "word2": ""
        },
        "output": 3
      },
      {
        "input": {
          "word1": "kitten",
          "word2": "sitting"
        },
        "output": 3
      },
      {
        "input": {
          "word1": "algorithm",
          "word2": "altruistic"
        },
        "output": 6
      },
      {
        "input": {
          "word1": "pneumonoultramicroscopicsilicovolcanoconiosis",
          "word2": "ultramicroscopically"
        },
        "output": 27
      },
      {
        "input": {
          "word1": "a",
          "word2": "b"
        },
        "output": 1
      }
    ],
    "title": "Edit Distance",
    "metaData": {}
  },
  {
    "category": ["Dynamic Programming", "Bit Manipulation"],
    "difficulty": 1,
    "evalMode": "exactMatch",
    "question": "<p>Given an integer <code>n</code>, return <em>an array </em><code>ans</code><em> of length </em><code>n + 1</code><em> such that for each </em><code>i</code><em> </em>(<code>0 &lt;= i &lt;= n</code>)<em>, </em><code>ans[i]</code><em> is the <strong>number of </strong></em><code>1</code><em><strong>&#39;s</strong> in the binary representation of </em><code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> [0,1,1]\n<strong>Explanation:</strong>\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> [0,1,1,2,1,2]\n<strong>Explanation:</strong>\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n3 --&gt; 11\n4 --&gt; 100\n5 --&gt; 101\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>It is very easy to come up with a solution with a runtime of <code>O(n log n)</code>. Can you do it in linear time <code>O(n)</code> and possibly in a single pass?</li>\n\t<li>Can you do it without using any built-in function (i.e., like <code>__builtin_popcount</code> in C++)?</li>\n</ul>\n",
    "solutions": {},
    "functionName": "countBitsInRange",
    "inputParameters": {
      "cpp": ["n", "int"],
      "java": ["n", "int"],
      "javascript": ["n", "number"],
      "python": ["n", "int"]
    },
    "tests": [
      {
        "input": {
          "n": 0
        },
        "output": [0]
      },
      {
        "input": {
          "n": 1
        },
        "output": [0, 1]
      },
      {
        "input": {
          "n": 2
        },
        "output": [0, 1, 1]
      },
      {
        "input": {
          "n": 5
        },
        "output": [0, 1, 1, 2, 1, 2]
      },
      {
        "input": {
          "n": 10
        },
        "output": [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2]
      },
      {
        "input": {
          "n": 15
        },
        "output": [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]
      },
      {
        "input": {
          "n": 20
        },
        "output": [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2]
      },
      {
        "input": {
          "n": 30
        },
        "output": [
          0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4,
          4
        ]
      },
      {
        "input": {
          "n": 50
        },
        "output": [
          0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4,
          4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3
        ]
      },
      {
        "input": {
          "n": 100
        },
        "output": [
          0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4,
          4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5,
          4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4,
          4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3
        ]
      }
    ],
    "title": "Counting Bits",
    "metaData": {}
  },
  {
    "category": ["Array", "Bit Manipulation"],
    "difficulty": 1,
    "evalMode": "exactMatch",
    "question": "<p>Given a <strong>non-empty</strong>&nbsp;array of integers <code>nums</code>, every element appears <em>twice</em> except for one. Find that single one.</p>\n\n<p>You must&nbsp;implement a solution with a linear runtime complexity and use&nbsp;only constant&nbsp;extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [2,2,1]\n<strong>Output:</strong> 1\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [4,1,2,1,2]\n<strong>Output:</strong> 4\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1]\n<strong>Output:</strong> 1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-3 * 10<sup>4</sup> &lt;= nums[i] &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li>Each element in the array appears twice except for one element which appears only once.</li>\n</ul>\n",
    "solutions": {},
    "functionName": "findSingleNumberXOR",
    "inputParameters": {
      "cpp": ["nums", "vector<int>"],
      "java": ["nums", "int[]"],
      "javascript": ["nums", "number[]"],
      "python": ["nums", "List[int]"]
    },
    "tests": [
      {
        "input": {
          "nums": [2, 2, 1]
        },
        "output": 1
      },
      {
        "input": {
          "nums": [4, 1, 2, 1, 2]
        },
        "output": 4
      },
      {
        "input": {
          "nums": [1]
        },
        "output": 1
      },
      {
        "input": {
          "nums": [1, 1, 2, 2, 3, 3, 4]
        },
        "output": 4
      },
      {
        "input": {
          "nums": [7, 3, 5, 5, 4, 3, 4, 8, 8]
        },
        "output": 7
      },
      {
        "input": {
          "nums": [-1, -1, -2]
        },
        "output": -2
      },
      {
        "input": {
          "nums": [1, 2, 3, 4, 5, 1, 2, 3, 4]
        },
        "output": 5
      },
      {
        "input": {
          "nums": [10000, 10000, 1]
        },
        "output": 1
      },
      {
        "input": {
          "nums": [-10000, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, -10000, 10000]
        },
        "output": 10000
      },
      {
        "input": {
          "nums": [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]
        },
        "output": 7
      }
    ],
    "title": "Single Number",
    "metaData": {}
  },
  {
    "category": ["Bit Manipulation"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>Given 3 positives numbers <code>a</code>, <code>b</code> and <code>c</code>. Return the minimum flips required in some bits of <code>a</code> and <code>b</code> to make (&nbsp;<code>a</code> OR <code>b</code> == <code>c</code>&nbsp;). (bitwise OR operation).<br />\r\nFlip operation&nbsp;consists of change&nbsp;<strong>any</strong>&nbsp;single bit 1 to 0 or change the bit 0 to 1&nbsp;in their binary representation.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/06/sample_3_1676.png\" style=\"width: 260px; height: 87px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> a = 2, b = 6, c = 5\r\n<strong>Output:</strong> 3\r\n<strong>Explanation: </strong>After flips a = 1 , b = 4 , c = 5 such that (<code>a</code> OR <code>b</code> == <code>c</code>)</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> a = 4, b = 2, c = 7\r\n<strong>Output:</strong> 1\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> a = 1, b = 2, c = 3\r\n<strong>Output:</strong> 0\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= a &lt;= 10^9</code></li>\r\n\t<li><code>1 &lt;= b&nbsp;&lt;= 10^9</code></li>\r\n\t<li><code>1 &lt;= c&nbsp;&lt;= 10^9</code></li>\r\n</ul>",
    "solutions": {},
    "functionName": "minFlipsToMakeAORBEqualC",
    "inputParameters": {
      "cpp": ["a", "int", "b", "int", "c", "int"],
      "java": ["a", "int", "b", "int", "c", "int"],
      "javascript": ["a", "number", "b", "number", "c", "number"],
      "python": ["a", "int", "b", "int", "c", "int"]
    },
    "tests": [
      {
        "input": {
          "a": 2,
          "b": 6,
          "c": 5
        },
        "output": 3
      },
      {
        "input": {
          "a": 4,
          "b": 2,
          "c": 7
        },
        "output": 1
      },
      {
        "input": {
          "a": 1,
          "b": 2,
          "c": 3
        },
        "output": 0
      },
      {
        "input": {
          "a": 8,
          "b": 3,
          "c": 5
        },
        "output": 3
      },
      {
        "input": {
          "a": 7,
          "b": 7,
          "c": 7
        },
        "output": 0
      },
      {
        "input": {
          "a": 12,
          "b": 5,
          "c": 3
        },
        "output": 3
      },
      {
        "input": {
          "a": 1,
          "b": 1,
          "c": 1
        },
        "output": 0
      },
      {
        "input": {
          "a": 15,
          "b": 15,
          "c": 1
        },
        "output": 2
      },
      {
        "input": {
          "a": 1000000000,
          "b": 1,
          "c": 1000000000
        },
        "output": 0
      },
      {
        "input": {
          "a": 123456789,
          "b": 987654321,
          "c": 1000000000
        },
        "output": 8
      }
    ],
    "title": "Minimum Flips to Make a OR b Equal to c",
    "metaData": {}
  },
  {
    "category": ["Array", "Dynamic Programming", "Greedy", "Sorting"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>Given an array of intervals <code>intervals</code> where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, return <em>the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[2,3],[3,4],[1,3]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> [1,3] can be removed and the rest of the intervals are non-overlapping.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[1,2],[1,2]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[2,3]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> You don&#39;t need to remove any of the intervals since they&#39;re already non-overlapping.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>-5 * 10<sup>4</sup> &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 5 * 10<sup>4</sup></code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "minIntervalsToRemove",
    "inputParameters": {
      "cpp": ["intervals", "vector<vector<int>>"],
      "java": ["intervals", "int[][]"],
      "javascript": ["intervals", "number[][]"],
      "python": ["intervals", "List[List[int]]"]
    },
    "tests": [
      {
        "input": {
          "intervals": [
            [1, 2],
            [2, 3],
            [3, 4],
            [1, 3]
          ]
        },
        "output": 1
      },
      {
        "input": {
          "intervals": [
            [1, 2],
            [1, 2],
            [1, 2]
          ]
        },
        "output": 2
      },
      {
        "input": {
          "intervals": [
            [1, 2],
            [2, 3]
          ]
        },
        "output": 0
      },
      {
        "input": {
          "intervals": [
            [1, 100],
            [11, 22],
            [1, 11],
            [2, 12]
          ]
        },
        "output": 2
      },
      {
        "input": {
          "intervals": [
            [1, 2],
            [2, 3],
            [3, 4],
            [4, 5]
          ]
        },
        "output": 0
      },
      {
        "input": {
          "intervals": [
            [1, 5],
            [2, 3],
            [3, 4],
            [4, 5]
          ]
        },
        "output": 2
      },
      {
        "input": {
          "intervals": [
            [1, 5],
            [1, 3],
            [2, 4],
            [3, 5]
          ]
        },
        "output": 2
      },
      {
        "input": {
          "intervals": [
            [1, 10],
            [2, 3],
            [4, 5],
            [6, 7]
          ]
        },
        "output": 1
      },
      {
        "input": {
          "intervals": [[1, 2]]
        },
        "output": 0
      },
      {
        "input": {
          "intervals": [
            [1, 100],
            [2, 3],
            [4, 5],
            [6, 7],
            [8, 9],
            [10, 11],
            [12, 13],
            [14, 15],
            [16, 17],
            [18, 19]
          ]
        },
        "output": 1
      }
    ],
    "title": "Non-overlapping Intervals",
    "metaData": {}
  },
  {
    "category": ["Array", "Greedy", "Sorting"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array <code>points</code> where <code>points[i] = [x<sub>start</sub>, x<sub>end</sub>]</code> denotes a balloon whose <strong>horizontal diameter</strong> stretches between <code>x<sub>start</sub></code> and <code>x<sub>end</sub></code>. You do not know the exact y-coordinates of the balloons.</p>\n\n<p>Arrows can be shot up <strong>directly vertically</strong> (in the positive y-direction) from different points along the x-axis. A balloon with <code>x<sub>start</sub></code> and <code>x<sub>end</sub></code> is <strong>burst</strong> by an arrow shot at <code>x</code> if <code>x<sub>start</sub> &lt;= x &lt;= x<sub>end</sub></code>. There is <strong>no limit</strong> to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.</p>\n\n<p>Given the array <code>points</code>, return <em>the <strong>minimum</strong> number of arrows that must be shot to burst all balloons</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[10,16],[2,8],[1,6],[7,12]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[1,2],[3,4],[5,6],[7,8]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> One arrow needs to be shot for each balloon for a total of 4 arrows.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[1,2],[2,3],[3,4],[4,5]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= points.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= x<sub>start</sub> &lt; x<sub>end</sub> &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "findMinArrowShots",
    "inputParameters": {
      "cpp": ["points", "vector<vector<int>>"],
      "java": ["points", "int[][]"],
      "javascript": ["points", "number[][]"],
      "python": ["points", "List[List[int]]"]
    },
    "tests": [
      {
        "input": {
          "points": [
            [10, 16],
            [2, 8],
            [1, 6],
            [7, 12]
          ]
        },
        "output": 2
      },
      {
        "input": {
          "points": [
            [1, 2],
            [3, 4],
            [5, 6],
            [7, 8]
          ]
        },
        "output": 4
      },
      {
        "input": {
          "points": [
            [1, 2],
            [2, 3],
            [3, 4],
            [4, 5]
          ]
        },
        "output": 2
      },
      {
        "input": {
          "points": [
            [1, 5],
            [2, 4],
            [3, 6]
          ]
        },
        "output": 2
      },
      {
        "input": {
          "points": [[1, 2]]
        },
        "output": 1
      },
      {
        "input": {
          "points": [
            [1, 2],
            [1, 2],
            [1, 2]
          ]
        },
        "output": 1
      },
      {
        "input": {
          "points": [
            [0, 9],
            [1, 8],
            [7, 8],
            [1, 6],
            [9, 16],
            [7, 13],
            [7, 10],
            [6, 11],
            [6, 9],
            [9, 13]
          ]
        },
        "output": 3
      },
      {
        "input": {
          "points": [[-2147483648, 2147483647]]
        },
        "output": 1
      },
      {
        "input": {
          "points": [
            [1, 100000],
            [100001, 200000],
            [200001, 300000]
          ]
        },
        "output": 3
      },
      {
        "input": {
          "points": [
            [1, 2],
            [2, 3],
            [3, 4],
            [4, 5],
            [5, 6],
            [6, 7],
            [7, 8],
            [8, 9],
            [9, 10]
          ]
        },
        "output": 5
      }
    ],
    "title": "Minimum Number of Arrows to Burst Balloons",
    "metaData": {}
  },
  {
    "category": ["Array", "Stack", "Monotonic Stack"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>Given an array of integers <code>temperatures</code> represents the daily temperatures, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is the number of days you have to wait after the</em> <code>i<sup>th</sup></code> <em>day to get a warmer temperature</em>. If there is no future day for which this is possible, keep <code>answer[i] == 0</code> instead.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> temperatures = [73,74,75,71,69,72,76,73]\n<strong>Output:</strong> [1,1,4,2,1,1,0,0]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> temperatures = [30,40,50,60]\n<strong>Output:</strong> [1,1,1,0]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> temperatures = [30,60,90]\n<strong>Output:</strong> [1,1,0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;temperatures.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>30 &lt;=&nbsp;temperatures[i] &lt;= 100</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "findDaysUntilWarmerTemperature",
    "inputParameters": {
      "cpp": ["temperatures", "vector<int>"],
      "java": ["temperatures", "int[]"],
      "javascript": ["temperatures", "number[]"],
      "python": ["temperatures", "List[int]"]
    },
    "tests": [
      {
        "input": {
          "temperatures": [73, 74, 75, 71, 69, 72, 76, 73]
        },
        "output": [1, 1, 4, 2, 1, 1, 0, 0]
      },
      {
        "input": {
          "temperatures": [30, 40, 50, 60]
        },
        "output": [1, 1, 1, 0]
      },
      {
        "input": {
          "temperatures": [30, 60, 90]
        },
        "output": [1, 1, 0]
      },
      {
        "input": {
          "temperatures": [100, 99, 98, 97, 96, 95]
        },
        "output": [0, 0, 0, 0, 0, 0]
      },
      {
        "input": {
          "temperatures": [30, 30, 30, 30, 30]
        },
        "output": [0, 0, 0, 0, 0]
      },
      {
        "input": {
          "temperatures": [50]
        },
        "output": [0]
      },
      {
        "input": {
          "temperatures": [70, 69, 72, 76, 73]
        },
        "output": [2, 1, 1, 0, 0]
      },
      {
        "input": {
          "temperatures": [89, 62, 70, 58, 47, 47, 46, 76, 100, 70]
        },
        "output": [8, 1, 5, 4, 3, 2, 1, 1, 0, 0]
      },
      {
        "input": {
          "temperatures": [55, 38, 53, 81, 61, 93, 97, 32, 43, 78]
        },
        "output": [3, 1, 1, 2, 1, 1, 0, 1, 1, 0]
      },
      {
        "input": {
          "temperatures": [34, 80, 80, 80, 34, 80, 80, 80, 34, 34]
        },
        "output": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0]
      }
    ],
    "title": "Daily Temperatures",
    "metaData": {}
  },
  {
    "category": ["Two Pointers", "String"],
    "difficulty": 1,
    "evalMode": "exactMatch",
    "question": "<p>Given a string <code>s</code>, reverse only all the vowels in the string and return it.</p>\n\n<p>The vowels are <code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, and <code>&#39;u&#39;</code>, and they can appear in both lower and upper cases, more than once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;IceCreAm&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;AceCreIm&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The vowels in <code>s</code> are <code>[&#39;I&#39;, &#39;e&#39;, &#39;e&#39;, &#39;A&#39;]</code>. On reversing the vowels, s becomes <code>&quot;AceCreIm&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;leetcode&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;leotcede&quot;</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consist of <strong>printable ASCII</strong> characters.</li>\n</ul>\n",
    "solutions": {},
    "functionName": "reverseVowelsInString",
    "inputParameters": {
      "cpp": ["s", "string"],
      "java": ["s", "String"],
      "javascript": ["s", "string"],
      "python": ["s", "str"]
    },
    "tests": [
      {
        "input": {
          "s": "hello"
        },
        "output": "holle"
      },
      {
        "input": {
          "s": "AEIOU"
        },
        "output": "UOIEA"
      },
      {
        "input": {
          "s": "aA"
        },
        "output": "Aa"
      },
      {
        "input": {
          "s": "leetcode"
        },
        "output": "leotcede"
      },
      {
        "input": {
          "s": "IceCreAm"
        },
        "output": "AceCreIm"
      },
      {
        "input": {
          "s": "abcdefghijklmnopqrstuvwxyz"
        },
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": {
          "s": "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        },
        "output": "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      },
      {
        "input": {
          "s": "aEiOu"
        },
        "output": "uOiEa"
      },
      {
        "input": {
          "s": "a"
        },
        "output": "a"
      },
      {
        "input": {
          "s": ".,?!:;"
        },
        "output": ".,?!:;"
      }
    ],
    "title": "Reverse Vowels of a String",
    "metaData": {}
  },
  {
    "category": ["Array", "Prefix Sum"],
    "difficulty": 1,
    "evalMode": "exactMatch",
    "question": "<p>Given an array of integers <code>nums</code>, calculate the <strong>pivot index</strong> of this array.</p>\n\n<p>The <strong>pivot index</strong> is the index where the sum of all the numbers <strong>strictly</strong> to the left of the index is equal to the sum of all the numbers <strong>strictly</strong> to the index&#39;s right.</p>\n\n<p>If the index is on the left edge of the array, then the left sum is <code>0</code> because there are no elements to the left. This also applies to the right edge of the array.</p>\n\n<p>Return <em>the <strong>leftmost pivot index</strong></em>. If no such index exists, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,7,3,6,5,6]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nThe pivot index is 3.\nLeft sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\nRight sum = nums[4] + nums[5] = 5 + 6 = 11\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong>\nThere is no index that satisfies the conditions in the problem statement.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,-1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nThe pivot index is 0.\nLeft sum = 0 (no elements to the left of index 0)\nRight sum = nums[1] + nums[2] = 1 + -1 = 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as&nbsp;1991:&nbsp;<a href=\"https://leetcode.com/problems/find-the-middle-index-in-array/\" target=\"_blank\">https://leetcode.com/problems/find-the-middle-index-in-array/</a></p>\n",
    "solutions": {},
    "functionName": "findLeftmostPivotIndex",
    "inputParameters": {
      "cpp": ["nums", "vector<int>"],
      "java": ["nums", "int[]"],
      "javascript": ["nums", "number[]"],
      "python": ["nums", "List[int]"]
    },
    "tests": [
      {
        "input": {
          "nums": [1, 7, 3, 6, 5, 6]
        },
        "output": 3
      },
      {
        "input": {
          "nums": [1, 2, 3]
        },
        "output": -1
      },
      {
        "input": {
          "nums": [2, 1, -1]
        },
        "output": 0
      },
      {
        "input": {
          "nums": [1]
        },
        "output": 0
      },
      {
        "input": {
          "nums": [-1, -1, -1, 0, 1, 1]
        },
        "output": 0
      },
      {
        "input": {
          "nums": [1, 1, 1, 1, 1, 1]
        },
        "output": 3
      },
      {
        "input": {
          "nums": [-1, -1, 0, 1, 1, 0]
        },
        "output": 5
      },
      {
        "input": {
          "nums": [0, 0, 0, 0]
        },
        "output": 0
      },
      {
        "input": {
          "nums": [1, 2, 3, 4, 5]
        },
        "output": -1
      },
      {
        "input": {
          "nums": [-1000, 0, 1000]
        },
        "output": 1
      }
    ],
    "title": "Find Pivot Index",
    "metaData": {}
  },
  {
    "category": ["Array", "Hash Table"],
    "difficulty": 1,
    "evalMode": "sortedMatch",
    "question": "<p>Given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code>, return <em>a list</em> <code>answer</code> <em>of size</em> <code>2</code> <em>where:</em></p>\n\n<ul>\n\t<li><code>answer[0]</code> <em>is a list of all <strong>distinct</strong> integers in</em> <code>nums1</code> <em>which are <strong>not</strong> present in</em> <code>nums2</code><em>.</em></li>\n\t<li><code>answer[1]</code> <em>is a list of all <strong>distinct</strong> integers in</em> <code>nums2</code> <em>which are <strong>not</strong> present in</em> <code>nums1</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that the integers in the lists may be returned in <strong>any</strong> order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3], nums2 = [2,4,6]\n<strong>Output:</strong> [[1,3],[4,6]]\n<strong>Explanation:\n</strong>For nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].\nFor nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6].</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,3], nums2 = [1,1,2,2]\n<strong>Output:</strong> [[3],[]]\n<strong>Explanation:\n</strong>For nums1, nums1[2] and nums1[3] are not present in nums2. Since nums1[2] == nums1[3], their value is only included once and answer[0] = [3].\nEvery integer in nums2 is present in nums1. Therefore, answer[1] = [].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "findDistinctDifferences",
    "inputParameters": {
      "cpp": ["nums1", "vector<int>", "nums2", "vector<int>"],
      "java": ["nums1", "int[]", "nums2", "int[]"],
      "javascript": ["nums1", "number[]", "nums2", "number[]"],
      "python": ["nums1", "List[int]", "nums2", "List[int]"]
    },
    "tests": [
      {
        "input": {
          "nums1": [1, 2, 3],
          "nums2": [2, 4, 6]
        },
        "output": [
          [1, 3],
          [4, 6]
        ]
      },
      {
        "input": {
          "nums1": [1, 2, 3, 3],
          "nums2": [1, 1, 2, 2]
        },
        "output": [[3], []]
      },
      {
        "input": {
          "nums1": [1, 2, 3, 4, 5],
          "nums2": [6, 7, 8, 9, 10]
        },
        "output": [
          [1, 2, 3, 4, 5],
          [6, 7, 8, 9, 10]
        ]
      },
      {
        "input": {
          "nums1": [1, 1, 1, 1],
          "nums2": [2, 2, 2, 2]
        },
        "output": [[1], [2]]
      },
      {
        "input": {
          "nums1": [-1, 0, 1],
          "nums2": [-2, 0, 2]
        },
        "output": [
          [-1, 1],
          [-2, 2]
        ]
      },
      {
        "input": {
          "nums1": [1],
          "nums2": [1]
        },
        "output": [[], []]
      },
      {
        "input": {
          "nums1": [1, 2, 3, 4, 5],
          "nums2": [1, 2, 3, 4, 5]
        },
        "output": [[], []]
      },
      {
        "input": {
          "nums1": [-1000, 0, 1000],
          "nums2": [-999, 999]
        },
        "output": [
          [-1000, 0, 1000],
          [-999, 999]
        ]
      },
      {
        "input": {
          "nums1": [1, 2, 3, 4, 5, 6],
          "nums2": [4, 5, 6, 7, 8, 9]
        },
        "output": [
          [1, 2, 3],
          [7, 8, 9]
        ]
      },
      {
        "input": {
          "nums1": [1, 1, 2, 2, 3, 3],
          "nums2": [2, 2, 3, 3, 4, 4]
        },
        "output": [[1], [4]]
      }
    ],
    "title": "Find the Difference of Two Arrays",
    "metaData": {}
  },
  {
    "category": ["Array", "Hash Table"],
    "difficulty": 1,
    "evalMode": "exactMatch",
    "question": "<p>Given an array of integers <code>arr</code>, return <code>true</code> <em>if the number of occurrences of each value in the array is <strong>unique</strong> or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,2,1,1,3]\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [-3,0,1,-3,1,1,1,-3,10,0]\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= arr[i] &lt;= 1000</code></li>\n</ul>\n",
    "solutions": {},
    "functionName": "isOccurrenceCountUnique",
    "inputParameters": {
      "cpp": ["arr", "vector<int>"],
      "java": ["arr", "int[]"],
      "javascript": ["arr", "number[]"],
      "python": ["arr", "List[int]"]
    },
    "tests": [
      {
        "input": {
          "arr": [1, 2, 2, 1, 1, 3]
        },
        "output": true
      },
      {
        "input": {
          "arr": [1, 2]
        },
        "output": false
      },
      {
        "input": {
          "arr": [-3, 0, 1, -3, 1, 1, 1, -3, 10, 0]
        },
        "output": true
      },
      {
        "input": {
          "arr": [1, 1, 1, 1, 1]
        },
        "output": true
      },
      {
        "input": {
          "arr": [1, 2, 3, 4, 5, 6]
        },
        "output": true
      },
      {
        "input": {
          "arr": [1, 1, 2, 2, 3, 3]
        },
        "output": false
      },
      {
        "input": {
          "arr": [-1000, 1000, -1000, 1000]
        },
        "output": true
      },
      {
        "input": {
          "arr": [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
        },
        "output": true
      },
      {
        "input": {
          "arr": [1, 2, 3, 1, 2, 3]
        },
        "output": false
      },
      {
        "input": {
          "arr": [1]
        },
        "output": true
      }
    ],
    "title": "Unique Number of Occurrences",
    "metaData": {}
  },
  {
    "category": ["Hash Table", "String", "Sorting", "Counting"],
    "difficulty": 2,
    "evalMode": "exactMatch",
    "question": "<p>Two strings are considered <strong>close</strong> if you can attain one from the other using the following operations:</p>\n\n<ul>\n\t<li>Operation 1: Swap any two <strong>existing</strong> characters.\n\n\t<ul>\n\t\t<li>For example, <code>a<u>b</u>cd<u>e</u> -&gt; a<u>e</u>cd<u>b</u></code></li>\n\t</ul>\n\t</li>\n\t<li>Operation 2: Transform <strong>every</strong> occurrence of one <strong>existing</strong> character into another <strong>existing</strong> character, and do the same with the other character.\n\t<ul>\n\t\t<li>For example, <code><u>aa</u>c<u>abb</u> -&gt; <u>bb</u>c<u>baa</u></code> (all <code>a</code>&#39;s turn into <code>b</code>&#39;s, and all <code>b</code>&#39;s turn into <code>a</code>&#39;s)</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>You can use the operations on either string as many times as necessary.</p>\n\n<p>Given two strings, <code>word1</code> and <code>word2</code>, return <code>true</code><em> if </em><code>word1</code><em> and </em><code>word2</code><em> are <strong>close</strong>, and </em><code>false</code><em> otherwise.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;abc&quot;, word2 = &quot;bca&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can attain word2 from word1 in 2 operations.\nApply Operation 1: &quot;a<u>bc</u>&quot; -&gt; &quot;a<u>cb</u>&quot;\nApply Operation 1: &quot;<u>a</u>c<u>b</u>&quot; -&gt; &quot;<u>b</u>c<u>a</u>&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;a&quot;, word2 = &quot;aa&quot;\n<strong>Output:</strong> false\n<strong>Explanation: </strong>It is impossible to attain word2 from word1, or vice versa, in any number of operations.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;cabbba&quot;, word2 = &quot;abbccc&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can attain word2 from word1 in 3 operations.\nApply Operation 1: &quot;ca<u>b</u>bb<u>a</u>&quot; -&gt; &quot;ca<u>a</u>bb<u>b</u>&quot;\nApply Operation 2: &quot;<u>c</u>aa<u>bbb</u>&quot; -&gt; &quot;<u>b</u>aa<u>ccc</u>&quot;\nApply Operation 2: &quot;<u>baa</u>ccc&quot; -&gt; &quot;<u>abb</u>ccc&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word1.length, word2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>word1</code> and <code>word2</code> contain only lowercase English letters.</li>\n</ul>\n",
    "solutions": {},
    "functionName": "areStringsClose",
    "inputParameters": {
      "cpp": ["word1", "string", "word2", "string"],
      "java": ["word1", "String", "word2", "String"],
      "javascript": ["word1", "string", "word2", "string"],
      "python": ["word1", "str", "word2", "str"]
    },
    "tests": [
      {
        "input": {
          "word1": "abc",
          "word2": "bca"
        },
        "output": true
      },
      {
        "input": {
          "word1": "a",
          "word2": "aa"
        },
        "output": false
      },
      {
        "input": {
          "word1": "cabbba",
          "word2": "abbccc"
        },
        "output": true
      },
      {
        "input": {
          "word1": "hello",
          "word2": "world"
        },
        "output": false
      },
      {
        "input": {
          "word1": "aabbc",
          "word2": "bbaac"
        },
        "output": true
      },
      {
        "input": {
          "word1": "aaabbbbcccdddd",
          "word2": "abcdabcdabcdabcd"
        },
        "output": false
      },
      {
        "input": {
          "word1": "uau",
          "word2": "ssx"
        },
        "output": false
      },
      {
        "input": {
          "word1": "abbbzcf",
          "word2": "babzzcf"
        },
        "output": true
      },
      {
        "input": {
          "word1": "aaaa",
          "word2": "bbbb"
        },
        "output": true
      },
      {
        "input": {
          "word1": "abcdefghijklmnopqrstuvwxyz",
          "word2": "zyxwvutsrqponmlkjihgfedcba"
        },
        "output": true
      }
    ],
    "title": "Determine if Two Strings Are Close",
    "metaData": {}
  }
]
